{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/common-components/confirm-dialog/confirm-dialog.component.ts","./src/app/common-components/confirm-dialog/confirm-dialog.component.html","./src/app/common-components/modal-dialog/modal-dialog.component.ts","./src/app/common-components/modal-dialog/modal-dialog.component.html","./src/app/customer/customer-details/customer-details.component.ts","./src/app/customer/customer-details/customer-details.component.html","./src/app/customer/customer-edit/customer-edit.component.ts","./src/app/customer/customer-edit/customer-edit.component.html","./src/app/customer/customer-list/customer-list.component.ts","./src/app/customer/customer-list/customer-list.component.html","./src/app/customer/customer-list/index.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/order/order-details/order-details.component.ts","./src/app/order/order-details/order-details.component.html","./src/app/order/order-edit/order-edit.component.ts","./src/app/order/order-edit/order-edit.component.html","./src/app/order/order-list/order-list.component.ts","./src/app/order/order-list/order-list.component.html","./src/app/register/register.component.ts","./src/app/register/register.component.html","./src/app/shared/enum/gender.ts","./src/app/shared/enum/order-status.ts","./src/app/shared/enum/title.ts","./src/app/shared/model/customer.ts","./src/app/shared/model/order.ts","./src/app/shared/model/user.ts","./src/app/shared/services/authentication/auth-guard.service.ts","./src/app/shared/services/authentication/auth.service.ts","./src/app/shared/services/connection/connection.service.ts","./src/app/shared/services/customer/customer.service.ts","./src/app/shared/services/database/indexed-database.service.ts","./src/app/shared/services/order/order.service.ts","./src/app/shared/services/product/product.service.ts","./src/app/shared/services/user/user.service.ts","./src/app/shared/shared.module.ts","./src/app/user/user.component.ts","./src/app/user/user.component.html","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CustomerListComponent } from './customer/customer-list/customer-list.component';\r\nimport { CustomerDetailsComponent } from './customer/customer-details/customer-details.component';\r\nimport { CustomerEditComponent } from './customer/customer-edit/customer-edit.component';\r\nimport { OrderDetailsComponent } from './order/order-details/order-details.component';\r\nimport { OrderEditComponent } from './order/order-edit/order-edit.component';\r\nimport { OrderListComponent } from './order/order-list/order-list.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { AuthGuardService } from './shared/services/authentication/auth-guard.service';\r\nimport { RegisterComponent } from './register/register.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'login', component: LoginComponent },\r\n  {\r\n    path: 'customer',\r\n    canActivate: [AuthGuardService],\r\n    children: [\r\n      { path: '', redirectTo: 'list', pathMatch: 'full' },\r\n      { path: 'list', component: CustomerListComponent },\r\n      { path: 'details/:id', component: CustomerDetailsComponent },\r\n      { path: 'edit/:id', component: CustomerEditComponent },\r\n      { path: 'new', component: CustomerEditComponent },\r\n    ],\r\n  },\r\n  {\r\n    path: 'order',\r\n    canActivate: [AuthGuardService],\r\n    children: [\r\n      { path: '', redirectTo: 'list', pathMatch: 'full' },\r\n      { path: 'list', component: OrderListComponent },\r\n      { path: 'details/:id', component: OrderDetailsComponent },\r\n      { path: 'edit/:id', component: OrderEditComponent },\r\n      { path: 'new', component: OrderEditComponent },\r\n    ],\r\n  },\r\n  { path: 'register', component: RegisterComponent, pathMatch: 'full' },\r\n  { path: '', redirectTo: 'login', pathMatch: 'full' },\r\n  { path: '*', redirectTo: 'login', pathMatch: 'full' },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n","import { Component } from '@angular/core';\nimport {\n  ConfirmDialogModel,\n  ConfirmDialogComponent,\n} from './common-components/confirm-dialog/confirm-dialog.component';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { IndexedDatabaseService } from './shared/services/database/indexed-database.service';\nimport { Router } from '@angular/router';\nimport { AuthService } from './shared/services/authentication/auth.service';\nimport { ConnectionService } from './shared/services/connection/connection.service';\nimport { ModalDialogComponent } from './common-components/modal-dialog/modal-dialog.component';\nimport { UserService } from './shared/services/user/user.service';\nimport { User } from './shared/model/user';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'customers';\n  indexedDatabaseService: IndexedDatabaseService;\n  isAuthenticated: Boolean = false;\n  isOnline: Boolean;\n\n  constructor(\n    public dialog: MatDialog,\n    private IndexedDatabaseService: IndexedDatabaseService,\n    private userService: UserService,\n    private router: Router,\n    private authService: AuthService,\n    private connectionService: ConnectionService\n  ) {\n    authService.userAuthenticated.subscribe((isAuthenticated) => {\n      this.isAuthenticated = isAuthenticated;\n    });\n\n    connectionService.connectionChanged.subscribe((isOnline) => {\n      this.isOnline = isOnline;\n    });\n  }\n\n  goOffline(event) {\n    this.connectionService.goOffline();\n  }\n\n  goOnline(event) {\n    this.connectionService.goOnline();\n  }\n\n  async showProfile(event) {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = true;\n    dialogConfig.id = 'modal-component';\n\n    let userId = this.authService.getCurrentUserId();\n    let users = await this.userService.getUser(userId);\n    let user = users[0] as User;\n\n    dialogConfig.data = { title: user.username, object: user };\n\n    this.dialog.open(ModalDialogComponent, dialogConfig);\n  }\n\n  logout(event) {\n    const dialogData = new ConfirmDialogModel('Logout', 'Do you want to logout?');\n\n    let dialogRef = this.dialog.open(ConfirmDialogComponent, {\n      maxWidth: '400px',\n      data: dialogData,\n    });\n\n    dialogRef.afterClosed().subscribe((dialogResult) => {\n      const result = dialogResult;\n\n      if (result) {\n        this.authService.logout();\n        this.router.navigate(['/login']);\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.IndexedDatabaseService.ngOnInit();\n  }\n}\n","<nav class=\"navbar navbar-expand-lg\">\r\n  <img class=\"logo\" src=\"../../../assets/icons/logo.png\" />\r\n  <h1>Customers Application</h1>\r\n  <button\r\n    class=\"navbar-toggler\"\r\n    type=\"button\"\r\n    data-toggle=\"collapse\"\r\n    data-target=\"#navbarNavAltMarkup\"\r\n    aria-controls=\"navbarNavAltMarkup\"\r\n    aria-expanded=\"false\"\r\n    aria-label=\"Toggle navigation\"\r\n  >\r\n    <span class=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n  <div *ngIf=\"isAuthenticated\" class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n    <div class=\"navbar-nav\">\r\n      <a\r\n        class=\"nav-item nav-link\"\r\n        routerLinkActive=\"active-link\"\r\n        [routerLinkActiveOptions]=\"{ exact: false }\"\r\n        routerLink=\"/customer\"\r\n        >Customers</a\r\n      >\r\n      <a\r\n        class=\"nav-item nav-link\"\r\n        routerLinkActive=\"active-link\"\r\n        [routerLinkActiveOptions]=\"{ exact: false }\"\r\n        routerLink=\"/order\"\r\n        >Orders</a\r\n      >\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"isAuthenticated\" class=\"menu-actions\">\r\n    <img class=\"menu-item profile\" src=\"../../../assets/icons/profile.png\" (click)=\"showProfile($event)\" />\r\n\r\n    <img\r\n      *ngIf=\"isOnline\"\r\n      class=\"menu-item onlineOffline\"\r\n      src=\"../../../assets/icons/online.png\"\r\n      (click)=\"goOffline($event)\"\r\n    />\r\n    <img\r\n      *ngIf=\"!isOnline\"\r\n      class=\"menu-item onlineOffline\"\r\n      src=\"../../../assets/icons/offline.png\"\r\n      (click)=\"goOnline($event)\"\r\n    />\r\n\r\n    <img class=\"menu-item settings\" src=\"../../../assets/icons/logout.png\" (click)=\"logout($event)\" />\r\n  </div>\r\n</nav>\r\n\r\n<router-outlet></router-outlet>\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { CustomerModule } from 'src/app/customer/customer.module';\r\nimport { SharedModule } from './shared/shared.module';\r\nimport { CustomerListComponent } from './customer/customer-list';\r\nimport { CustomerDetailsComponent } from './customer/customer-details/customer-details.component';\r\nimport { CustomerEditComponent } from './customer/customer-edit/customer-edit.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ConfirmDialogComponent } from './common-components/confirm-dialog/confirm-dialog.component';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { OrderDetailsComponent } from './order/order-details/order-details.component';\r\nimport { OrderModule } from './order/order.module';\r\nimport { OrderEditComponent } from './order/order-edit/order-edit.component';\r\nimport { OrderListComponent } from './order/order-list/order-list.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { ModalDialogComponent } from './common-components/modal-dialog/modal-dialog.component';\r\nimport { UserComponent } from './user/user.component';\r\nimport { RegisterComponent } from './register/register.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    CustomerListComponent,\r\n    CustomerDetailsComponent,\r\n    CustomerEditComponent,\r\n    ConfirmDialogComponent,\r\n    OrderDetailsComponent,\r\n    OrderEditComponent,\r\n    OrderListComponent,\r\n    LoginComponent,\r\n    ModalDialogComponent,\r\n    UserComponent,\r\n    RegisterComponent,\r\n  ],\r\n  imports: [\r\n    AppRoutingModule,\r\n    BrowserModule,\r\n    FormsModule,\r\n    MatDialogModule,\r\n    MatSnackBarModule,\r\n    NgbModule,\r\n    ReactiveFormsModule,\r\n    SharedModule,\r\n    BrowserAnimationsModule,\r\n  ],\r\n  providers: [],\r\n  entryComponents: [ConfirmDialogComponent, ModalDialogComponent],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Component, OnInit, Inject } from '@angular/core';\n\n@Component({\n  selector: 'app-confirm-dialog',\n  templateUrl: './confirm-dialog.component.html',\n  styleUrls: ['./confirm-dialog.component.scss']\n})\nexport class ConfirmDialogComponent implements OnInit {\n  title: string;\n  message: string;\n\n  constructor(public dialogRef: MatDialogRef<ConfirmDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: ConfirmDialogModel) {    \n    this.title = data.title;\n    this.message = data.message;\n  }\n\n  ngOnInit() {\n  }\n\n  onConfirm(): void {   \n    this.dialogRef.close(true);\n  }\n\n  onDismiss(): void {   \n    this.dialogRef.close(false);\n  }\n}\n\nexport class ConfirmDialogModel {\n\n  constructor(public title: string, public message: string) {\n  }\n}\n","<h2>\n  {{ title }}\n</h2>\n\n<div>\n  <p class=\"text\">{{ message }}</p>\n</div>\n\n<div mat-dialog-actions>\n  <button class=\"btn btn-primary btn-lg btn-danger shadow-none\" mat-button (click)=\"onDismiss()\">No</button>\n  <button\n    class=\"btn btn-primary btn-lg btn-success shadow-none\"\n    mat-raised-button\n    color=\"primary\"\n    (click)=\"onConfirm()\"\n  >\n    Yes\n  </button>\n</div>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-modal-dialog',\n  templateUrl: './modal-dialog.component.html',\n  styleUrls: ['./modal-dialog.component.scss'],\n})\nexport class ModalDialogComponent implements OnInit {\n  public title: String;\n  public object: any;\n\n  constructor(public dialogRef: MatDialogRef<ModalDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) {\n    this.title = data.title;\n    this.object = data.object;\n  }\n\n  ngOnInit() {}\n\n  closeModal() {\n    this.dialogRef.close();\n  }\n}\n","<div id=\"modal-content-wrapper\">\n  <header>\n    <h2>{{ title }}</h2>\n  </header>\n  <section>\n    <app-user [object]=\"object\"></app-user>\n  </section>\n  <footer>\n    <button class=\"btn\" (click)=\"closeModal()\">Close</button>\n  </footer>\n</div>\n","import { Component, OnInit } from '@angular/core';\r\nimport { Customer } from 'src/app/shared/model/customer';\r\nimport { CustomerService } from 'src/app/shared/services/customer/customer.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport {\r\n  ConfirmDialogComponent,\r\n  ConfirmDialogModel,\r\n} from 'src/app/common-components/confirm-dialog/confirm-dialog.component';\r\nimport { Order } from 'src/app/shared/model/order';\r\nimport { Product } from 'src/app/shared/model/product';\r\nimport { OrderService } from 'src/app/shared/services/order/order.service';\r\n\r\n@Component({\r\n  selector: 'app-customer-details',\r\n  templateUrl: './customer-details.component.html',\r\n  styleUrls: ['./customer-details.component.scss'],\r\n})\r\nexport class CustomerDetailsComponent implements OnInit {\r\n  id: any;\r\n  customer: Customer;\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router,\r\n    private customerService: CustomerService,\r\n    private orderService: OrderService,\r\n    public dialog: MatDialog,\r\n    public snackBar: MatSnackBar\r\n  ) {}\r\n\r\n  deleteCustomer(event) {\r\n    const dialogData = new ConfirmDialogModel('Confirm Action', 'Are you sure young want to delete customer?');\r\n\r\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\r\n      maxWidth: '400px',\r\n      data: dialogData,\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((dialogResult) => {\r\n      const result = dialogResult;\r\n\r\n      if (result) {\r\n        this.customerService.deleteCustomer(this.customer.id.toString());\r\n        this.snackBar.open('Customer ' + this.customer.firstname + ' ' + this.customer.lastname + ' deleted', null, {\r\n          duration: 5000,\r\n        });\r\n        this.router.navigate(['/customer/list']);\r\n      }\r\n    });\r\n  }\r\n\r\n  async ngOnInit() {\r\n    this.id = this.activatedRoute.snapshot.params.id;\r\n    let customers = await this.customerService.getCustomer(this.id);\r\n    let customer = customers[0] as Customer;\r\n    customer.orders = await this.orderService.getAllOrdersOfCustomer(this.id);\r\n    this.customer = customer;\r\n  }\r\n}\r\n","<div class=\"container-fluid\">\n  <h1>{{ customer.title }} {{ customer.firstname }} {{ customer.lastname }}</h1>\n\n  <div class=\"row customer\">\n    <div class=\"col data-column\">\n      <h2>User Data</h2>\n      <div class=\"detailItem\">\n        <img class=\"icon\" src=\"../../../assets/icons/birth.png\" />{{ customer.birthdate | date: 'longDate' }}\n      </div>\n      <div class=\"detailItem\"><img class=\"icon\" src=\"../../../assets/icons/gender.png\" />{{ customer.gender }}</div>\n      <div class=\"detailItem\"><img class=\"icon\" src=\"../../../assets/icons/job.png\" />{{ customer.job }}</div>\n      <div class=\"detailItem\">\n        <img class=\"icon\" src=\"../../../assets/icons/map.png\" />{{ customer.streetaddress }}, {{ customer.postalcode }}\n        {{ customer.city }} ({{ customer.country }})\n      </div>\n      <div class=\"detailItem\"><img class=\"icon\" src=\"../../../assets/icons/currency.png\" />{{ customer.currency }}</div>\n      <div class=\"detailItem\"><img class=\"icon\" src=\"../../../assets/icons/phone.png\" />{{ customer.phone }}</div>\n      <div class=\"detailItem\"><img class=\"icon\" src=\"../../../assets/icons/mail.png\" />{{ customer.email }}</div>\n    </div>\n    <div class=\"w-100 d-block d-md-none\"></div>\n    <div class=\"col data-column\">\n      <h2>Orders</h2>\n      <div\n        class=\"detailItem orderLink\"\n        *ngFor=\"let order of customer.orders\"\n        [routerLink]=\"['/order/details', order.id]\"\n      >\n        <img class=\"icon\" src=\"../../../assets/icons/order.png\" /> {{ order.amount }} x {{ order.name }} ({{\n          order.manufacturer\n        }}) --- {{ order.amount * order.price | currency }}\n      </div>\n      <div class=\"detailItem\" *ngIf=\"customer.orders.length == 0\">\n        <img class=\"icon\" src=\"../../../assets/icons/order.png\" />No orders\n      </div>\n    </div>\n    <div class=\"w-100 d-block d-lg-none\"></div>\n    <div class=\"col data-column\">\n      <h2>Issues</h2>\n      <div class=\"detailItem\"><img class=\"icon\" src=\"../../../assets/icons/issue.png\" />No issues</div>\n    </div>\n  </div>\n\n  <button type=\"button\" class=\"btn btn-primary btn-lg shadow-none\" [routerLink]=\"['/customer/edit', customer.id]\">\n    Edit\n  </button>\n  <button type=\"button\" class=\"btn btn-primary btn-lg shadow-none\" (click)=\"deleteCustomer($event)\">Delete</button>\n  <button type=\"button\" class=\"btn btn-primary btn-lg shadow-none\" routerLink=\"/customer/list\">\n    Back to Customer List\n  </button>\n</div>\n","import { Component, OnInit } from '@angular/core';\r\nimport { Customer } from 'src/app/shared/model/customer';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CustomerService } from 'src/app/shared/services/customer/customer.service';\r\nimport { Router } from '@angular/router';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Gender } from 'src/app/shared/enum/gender';\r\nimport { Title } from 'src/app/shared/enum/title';\r\n\r\n@Component({\r\n  selector: 'app-customer-edit',\r\n  templateUrl: './customer-edit.component.html',\r\n  styleUrls: ['./customer-edit.component.scss'],\r\n})\r\nexport class CustomerEditComponent implements OnInit {\r\n  id: any;\r\n  isNew: boolean = false;\r\n  customer: Customer;\r\n  form: FormGroup;\r\n  genderTypes = Gender;\r\n  genderTypeOptions = [];\r\n  titleTypes = Title;\r\n  titleTypeOptions = [];\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router,\r\n    private customerService: CustomerService,\r\n    public snackBar: MatSnackBar\r\n  ) {\r\n    this.activatedRoute.url.subscribe((params) => {\r\n      if (params[0].path === 'new') {\r\n        this.isNew = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  get formControls() {\r\n    return this.form.controls;\r\n  }\r\n\r\n  submit() {\r\n    this.form.markAllAsTouched();\r\n\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.customer = this.form.value as Customer;\r\n\r\n    if (this.isNew) {\r\n      this.customer.id = this.id;\r\n\r\n      this.customerService.insertCustomer(this.customer);\r\n      this.snackBar.open('Customer ' + this.customer.firstname + ' ' + this.customer.lastname + ' added', null, {\r\n        duration: 5000,\r\n      });\r\n      this.router.navigate(['/customer/list']);\r\n    } else {\r\n      this.customerService.updateCustomer(this.customer);\r\n      this.snackBar.open('Customer ' + this.customer.firstname + ' ' + this.customer.lastname + ' updated', null, {\r\n        duration: 5000,\r\n      });\r\n      this.router.navigate(['/customer/details', this.customer.id]);\r\n    }\r\n  }\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    this.genderTypeOptions = Object.keys(this.genderTypes);\r\n    this.titleTypeOptions = Object.keys(this.titleTypes);\r\n\r\n    this.form = new FormGroup({\r\n      id: new FormControl(''),\r\n      firstname: new FormControl('', [Validators.required, Validators.minLength(2)]),\r\n      lastname: new FormControl('', [Validators.required, Validators.minLength(2)]),\r\n      title: new FormControl('', [Validators.required]),\r\n      gender: new FormControl('', [Validators.required]),\r\n      job: new FormControl(''),\r\n      birthdate: new FormControl('', [Validators.required]),\r\n      streetaddress: new FormControl('', [Validators.required, Validators.minLength(4)]),\r\n      postalcode: new FormControl('', [Validators.required, Validators.minLength(4)]),\r\n      city: new FormControl('', [Validators.required, Validators.minLength(2)]),\r\n      country: new FormControl('', [Validators.required, Validators.minLength(2), Validators.maxLength(2)]),\r\n      currency: new FormControl('', [Validators.required, Validators.minLength(2)]),\r\n      phone: new FormControl('', [Validators.required, Validators.minLength(6)]),\r\n      email: new FormControl('', [Validators.required, Validators.minLength(6)]),\r\n    });\r\n\r\n    this.id = this.activatedRoute.snapshot.params.id;\r\n\r\n    if (this.isNew) {\r\n      const uuid = uuidv4();\r\n      this.id = uuid;\r\n      this.customer = new Customer(\r\n        this.id,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null\r\n      );\r\n\r\n      return;\r\n    }\r\n\r\n    let customers = await this.customerService.getCustomer(this.id);\r\n    this.customer = customers[0];\r\n    this.form.markAllAsTouched();\r\n    this.form.setValue(this.customer);\r\n  }\r\n}\r\n","<div class=\"container-fluid\">\r\n  <h1>Editing: {{ customer.firstname }} {{ customer.lastname }}</h1>\r\n\r\n  <form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\r\n    <div class=\"row\">\r\n      <div class=\"form-group\">\r\n        <label for=\"id\">Id</label>\r\n        <input formControlName=\"id\" id=\"id\" type=\"text\" class=\"form-control\" [ngModel]=\"customer.id\" readonly />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"form-group\">\r\n        <label for=\"title\">Title</label>\r\n        <select formControlName=\"title\" id=\"title\" class=\"form-control\" [ngModel]=\"customer.title\">\r\n          <option *ngFor=\"let key of titleTypeOptions\" [value]=\"key\">{{ key }}</option>\r\n        </select>\r\n\r\n        <div *ngIf=\"formControls.title.touched && formControls.title.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.title.errors.required\">Title is required.</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"w-100 d-block d-md-none\"></div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"firstname\">First name</label>\r\n        <input\r\n          formControlName=\"firstname\"\r\n          id=\"firstname\"\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          [ngModel]=\"customer.firstname\"\r\n        />\r\n\r\n        <div *ngIf=\"formControls.firstname.touched && formControls.firstname.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.firstname.errors.required\">First name is required.</div>\r\n          <div *ngIf=\"formControls.firstname.errors.minlength\">First name should be at least 2 characters long.</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"w-100 d-block d-md-none\"></div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"lastname\">Last name</label>\r\n        <input\r\n          formControlName=\"lastname\"\r\n          id=\"lastname\"\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          [ngModel]=\"customer.lastname\"\r\n        />\r\n\r\n        <div *ngIf=\"formControls.lastname.touched && formControls.lastname.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.lastname.errors.required\">Last name is required.</div>\r\n          <div *ngIf=\"formControls.lastname.errors.minlength\">Last name should be at least 2 characters long.</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"form-group\">\r\n        <label for=\"gender\">Gender</label>\r\n        <select formControlName=\"gender\" id=\"gender\" class=\"form-control\" [ngModel]=\"customer.gender\">\r\n          <option *ngFor=\"let key of genderTypeOptions\" [value]=\"key\">{{ key }}</option>\r\n        </select>\r\n\r\n        <div *ngIf=\"formControls.gender.touched && formControls.gender.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.gender.errors.required\">Gender is required.</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"w-100 d-block d-md-none\"></div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"job\">Job</label>\r\n        <input formControlName=\"job\" id=\"job\" type=\"text\" class=\"form-control\" [ngModel]=\"customer.job\" />\r\n      </div>\r\n\r\n      <div class=\"w-100 d-block d-md-none\"></div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"birthdate\">Birth date</label>\r\n        <input\r\n          formControlName=\"birthdate\"\r\n          id=\"birthdate\"\r\n          type=\"date\"\r\n          class=\"form-control\"\r\n          [ngModel]=\"customer.birthdate | date: 'yyyy-MM-dd'\"\r\n        />\r\n\r\n        <div *ngIf=\"formControls.birthdate.touched && formControls.birthdate.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.birthdate.errors.required\">Birth date is required.</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"form-group\">\r\n        <label for=\"streetaddress\">Street address</label>\r\n        <input\r\n          formControlName=\"streetaddress\"\r\n          id=\"streetaddress\"\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          [ngModel]=\"customer.streetaddress\"\r\n        />\r\n\r\n        <div\r\n          *ngIf=\"formControls.streetaddress.touched && formControls.streetaddress.invalid\"\r\n          class=\"alert alert-danger\"\r\n        >\r\n          <div *ngIf=\"formControls.streetaddress.errors.required\">Street address is required.</div>\r\n          <div *ngIf=\"formControls.streetaddress.errors.minlength\">\r\n            Street address should be at least 4 characters long.\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"w-100 d-block d-md-none\"></div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"postalcode\">Postal code</label>\r\n        <input\r\n          formControlName=\"postalcode\"\r\n          id=\"postalcode\"\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          [ngModel]=\"customer.postalcode\"\r\n        />\r\n\r\n        <div *ngIf=\"formControls.postalcode.touched && formControls.postalcode.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.postalcode.errors.required\">Postal code is required.</div>\r\n          <div *ngIf=\"formControls.postalcode.errors.minlength\">\r\n            Postal code should be at least 4 characters long.\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"w-100 d-block d-md-none\"></div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"city\">City</label>\r\n        <input formControlName=\"city\" id=\"city\" type=\"text\" class=\"form-control\" [ngModel]=\"customer.city\" />\r\n\r\n        <div *ngIf=\"formControls.city.touched && formControls.city.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.city.errors.required\">City is required.</div>\r\n          <div *ngIf=\"formControls.city.errors.minlength\">\r\n            City should be at least 4 characters long.\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"w-100 d-block d-md-none\"></div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"country\">Country</label>\r\n        <input formControlName=\"country\" id=\"country\" type=\"text\" class=\"form-control\" [ngModel]=\"customer.country\" />\r\n\r\n        <div *ngIf=\"formControls.country.touched && formControls.country.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.country.errors.required\">Country code is required.</div>\r\n          <div *ngIf=\"formControls.country.errors.minlength || formControls.country.errors.maxlength\">\r\n            Country code should be exactly 2 characters long.\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"form-group\">\r\n        <label for=\"currency\">Currency</label>\r\n        <input\r\n          formControlName=\"currency\"\r\n          id=\"currency\"\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          [ngModel]=\"customer.currency\"\r\n        />\r\n\r\n        <div *ngIf=\"formControls.currency.touched && formControls.currency.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.currency.errors.required\">Currency is required.</div>\r\n          <div *ngIf=\"formControls.currency.errors.minlength\">\r\n            Currency should be at least 2 characters long.\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"w-100 d-block d-md-none\"></div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"phone\">Phone</label>\r\n        <input formControlName=\"phone\" id=\"phone\" type=\"text\" class=\"form-control\" [ngModel]=\"customer.phone\" />\r\n\r\n        <div *ngIf=\"formControls.phone.touched && formControls.phone.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.phone.errors.required\">Phone is required.</div>\r\n          <div *ngIf=\"formControls.phone.errors.minlength\">\r\n            Phone should be at least 6 characters long.\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"w-100 d-block d-md-none\"></div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"email\">email</label>\r\n        <input formControlName=\"email\" id=\"email\" type=\"text\" class=\"form-control\" [ngModel]=\"customer.email\" />\r\n\r\n        <div *ngIf=\"formControls.email.touched && formControls.email.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.email.errors.required\">E-Mail is required.</div>\r\n          <div *ngIf=\"formControls.email.errors.minlength\">\r\n            E-Mail should be at least 6 characters long.\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <button\r\n      *ngIf=\"isNew\"\r\n      type=\"button\"\r\n      class=\"btn btn-primary btn-lg btn-danger shadow-none\"\r\n      routerLink=\"/customer/list\"\r\n    >\r\n      Cancel\r\n    </button>\r\n    <button\r\n      *ngIf=\"!isNew\"\r\n      type=\"button\"\r\n      class=\"btn btn-primary btn-lg btn-danger shadow-none\"\r\n      [routerLink]=\"['/customer/details', customer.id]\"\r\n    >\r\n      Cancel\r\n    </button>\r\n    <button type=\"button\" class=\"btn btn-primary btn-lg btn-success shadow-none\" type=\"submit\">\r\n      Save\r\n    </button>\r\n  </form>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Customer } from 'src/app/shared/model/customer';\r\nimport { CustomerService } from 'src/app/shared/services/customer/customer.service';\r\nimport { Order } from 'src/app/shared/model/order';\r\nimport { IndexedDatabaseService } from 'src/app/shared/services/database/indexed-database.service';\r\nimport { OrderService } from 'src/app/shared/services/order/order.service';\r\nimport { ConnectionService } from 'src/app/shared/services/connection/connection.service';\r\n\r\n@Component({\r\n  selector: 'app-customer-list',\r\n  templateUrl: './customer-list.component.html',\r\n  styleUrls: ['./customer-list.component.scss'],\r\n})\r\nexport class CustomerListComponent implements OnInit {\r\n  loading: boolean = false;\r\n  isLocalDataLoaded: boolean = false;\r\n\r\n  allCustomers: Customer[];\r\n  customers: Customer[];\r\n  allOrders: Order[];\r\n\r\n  constructor(\r\n    private customerService: CustomerService,\r\n    private orderService: OrderService,\r\n    private indexedDatabaseService: IndexedDatabaseService,\r\n    private connectionService: ConnectionService\r\n  ) {}\r\n\r\n  filter(filterString: string, filterSelection: string) {\r\n    this.customers = this.allCustomers.filter(function (elem) {\r\n      let filterValue;\r\n\r\n      switch (filterSelection) {\r\n        case 'name':\r\n          filterValue = elem.firstname + ' ' + elem.lastname;\r\n          break;\r\n        case 'gender':\r\n          if (elem.gender.toUpperCase() === 'MALE') {\r\n            return filterString.toUpperCase() === 'MALE';\r\n          }\r\n          if (elem.gender.toUpperCase() === 'FEMALE') {\r\n            return filterString.toUpperCase() === 'FEMALE';\r\n          }\r\n          if (elem.gender.toUpperCase() === 'OTHER') {\r\n            return filterString.toUpperCase() === 'OTHER';\r\n          }\r\n          break;\r\n        case 'job':\r\n          filterValue = elem.job;\r\n          break;\r\n        case 'street':\r\n          filterValue = elem.streetaddress;\r\n          break;\r\n        case 'postalcode':\r\n          filterValue = elem.postalcode ? elem.postalcode : '00000';\r\n          break;\r\n        case 'city':\r\n          filterValue = elem.city;\r\n          break;\r\n        case 'country':\r\n          filterValue = elem.country;\r\n          break;\r\n        default:\r\n          filterValue = elem.firstname + ' ' + elem.lastname;\r\n      }\r\n\r\n      return filterValue.toUpperCase().includes(filterString.toUpperCase());\r\n    });\r\n\r\n    this.customers.sort((customer1, customer2) => (customer1.lastname > customer2.lastname ? 1 : -1));\r\n  }\r\n  async ngOnInit() {\r\n    this.loading = true;\r\n\r\n    let connectionToServer = await this.connectionService.checkConnection();\r\n\r\n    if (connectionToServer) {\r\n      this.allCustomers = await this.customerService.getAllCustomers();\r\n      this.allCustomers = this.allCustomers;\r\n\r\n      this.indexedDatabaseService.addCustomersToDatabase(this.allCustomers);\r\n\r\n      let orders = await this.orderService.getAllOrders();\r\n      this.allOrders = orders;\r\n\r\n      this.indexedDatabaseService.addOrdersToDatabase(orders);\r\n\r\n      this.displayCustomers();\r\n    }\r\n  }\r\n\r\n  displayCustomers() {\r\n    for (let customer of this.allCustomers) {\r\n      let customerAsCustomer = customer as Customer;\r\n      let ordersOfCustomer = this.allOrders.filter((x) => x.customerid == customerAsCustomer.id);\r\n      customer.numberOfOrders = ordersOfCustomer.length;\r\n    }\r\n\r\n    this.customers = this.allCustomers.sort((customer1, customer2) =>\r\n      customer1.lastname > customer2.lastname ? 1 : -1\r\n    );\r\n    this.loading = false;\r\n  }\r\n}\r\n","<div class=\"container-fluid\">\r\n  <div *ngIf=\"loading\" class=\"spinner\" role=\"status\"></div>\r\n\r\n  <button class=\"btn btn-primary addCustomer shadow-none\" routerLink=\"/customer/new\">New Customer</button>\r\n  <h1>Customers</h1>\r\n\r\n  <form class=\"form-inline\" action=\"#\" (submit)=\"filter(filterString.value, filterSelection.value)\">\r\n    <input type=\"text\" class=\"form-control\" #filterString placeholder=\"Filter value\" />\r\n    <select class=\"form-control\" #filterSelection>\r\n      <option value=\"name\">Name</option>\r\n      <option value=\"gender\">Gender</option>\r\n      <option value=\"job\">Job</option>\r\n      <option value=\"street\">Street</option>\r\n      <option value=\"postalcode\">Postal Code</option>\r\n      <option value=\"city\">City</option>\r\n      <option value=\"country\">Country</option>\r\n    </select>\r\n    <button type=\"submit\" class=\"btn btn-primary shadow-none\">Submit</button>\r\n  </form>\r\n\r\n  <div class=\"row customer-row\" *ngFor=\"let customer of customers\" [routerLink]=\"['/customer/details', customer.id]\">\r\n    <div class=\"col customer-name-col\">\r\n      <p class=\"title\">{{ customer.title }}</p>\r\n      <h2>{{ customer.lastname }}, {{ customer.firstname }}</h2>\r\n      <p><img class=\"icon\" src=\"../../../assets/icons/birth.png\" />{{ customer.birthdate | date: 'longDate' }}</p>\r\n    </div>\r\n    <div class=\"col d-none d-sm-block customer-data-col\">\r\n      <p>\r\n        <img class=\"icon\" src=\"../../../assets/icons/map.png\" />{{ customer.streetaddress }}, {{ customer.postalcode }}\r\n        {{ customer.city }}\r\n        <span [ngClass]=\"'flag-icon flag-icon-' + customer.country | lowercase\"></span>\r\n      </p>\r\n      <p><img class=\"icon\" src=\"../../../assets/icons/phone.png\" />{{ customer.phone }}</p>\r\n      <p><img class=\"icon\" src=\"../../../assets/icons/mail.png\" />{{ customer.email }}</p>\r\n    </div>\r\n    <div class=\"col d-none d-lg-block customer-col\">\r\n      <p><img class=\"icon\" src=\"../../../assets/icons/order.png\" />{{ customer.numberOfOrders }} orders</p>\r\n    </div>\r\n    <div class=\"col d-none d-lg-block customer-col\">\r\n      <p><img class=\"icon\" src=\"../../../assets/icons/issue.png\" />No issues</p>\r\n    </div>\r\n  </div>\r\n</div>\r\n","export * from './customer-list.component';","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../shared/services/authentication/auth.service';\nimport { Router } from '@angular/router';\nimport { Form } from '@angular/forms';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n  username: String;\n  userPassword: String;\n  errorMessage: String;\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  ngOnInit() {}\n\n  login() {\n    this.authService\n      .validate(this.username, this.userPassword)\n      .then((response) => {\n        this.authService.setUserInfo({ user: response['user'] });\n        this.router.navigate(['customer']);\n      })\n      .catch((error) => {\n        this.errorMessage = \"User name and password don't match.\";\n      });\n  }\n}\n","<form class=\"form-signin\">\n  <h1>Please sign in</h1>\n  <label for=\"inputusername\" class=\"sr-only\">User name</label>\n  <input\n    type=\"text\"\n    name=\"username\"\n    id=\"inputusername\"\n    [(ngModel)]=\"username\"\n    class=\"form-control\"\n    placeholder=\"User name\"\n    required\n    autofocus\n  />\n  <label for=\"inputPassword\" class=\"sr-only\">Password</label>\n  <input\n    type=\"password\"\n    name=\"userPassword\"\n    id=\"inputPassword\"\n    [(ngModel)]=\"userPassword\"\n    class=\"form-control\"\n    placeholder=\"Password\"\n    required\n  />\n\n  <button class=\"btn btn-lg btn-primary btn-block\" (click)=\"login()\" type=\"button\">Sign in</button>\n  <p class=\"register\" routerLink=\"/register\">Register</p>\n  <p class=\"error\">{{ errorMessage }}</p>\n</form>\n","import { Component, OnInit } from '@angular/core';\nimport { Customer } from 'src/app/shared/model/customer';\nimport { CustomerService } from 'src/app/shared/services/customer/customer.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {\n  ConfirmDialogComponent,\n  ConfirmDialogModel,\n} from 'src/app/common-components/confirm-dialog/confirm-dialog.component';\nimport { Order } from 'src/app/shared/model/order';\nimport { Product } from 'src/app/shared/model/product';\nimport { OrderService } from 'src/app/shared/services/order/order.service';\nimport { ProductService } from 'src/app/shared/services/product/product.service';\nimport { OrderStatus } from 'src/app/shared/enum/order-status';\n\n@Component({\n  selector: 'app-order-details',\n  templateUrl: './order-details.component.html',\n  styleUrls: ['./order-details.component.scss'],\n})\nexport class OrderDetailsComponent implements OnInit {\n  id: any;\n  order: Order;\n  orderStatusTypes = OrderStatus;\n  orderStatusTypeOptions = [];\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private orderService: OrderService,\n    private productService: ProductService,\n    private customerService: CustomerService,\n    public dialog: MatDialog,\n    public snackBar: MatSnackBar\n  ) {}\n\n  deleteOrder(event) {\n    const dialogData = new ConfirmDialogModel('Confirm Action', 'Are you sure young want to delete order?');\n\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n      maxWidth: '400px',\n      data: dialogData,\n    });\n\n    dialogRef.afterClosed().subscribe((dialogResult) => {\n      const result = dialogResult;\n\n      if (result) {\n        this.orderService.deleteOrder(this.order.id.toString());\n        this.snackBar.open('order ' + this.order.name + ' deleted', null, {\n          duration: 5000,\n        });\n        this.router.navigate(['/order/list']);\n      }\n    });\n  }\n\n  async ngOnInit() {\n    this.orderStatusTypeOptions = Object.keys(this.orderStatusTypes)\n      .map((key) => this.orderStatusTypes[key])\n      .filter((value) => typeof value !== 'string') as string[];\n\n    this.id = this.activatedRoute.snapshot.params.id;\n    let orders = await this.orderService.getOrder(this.id);\n    let order = orders[0];\n    this.order = order;\n\n    let products = await this.productService.getProduct(order.productid.toString());\n    let product = products[0];\n    order.name = product.name;\n    order.manufacturer = product.manufacturer;\n    order.price = product.price;\n    order.totalPrice = order.amount * Number(order.price);\n\n    let customers = await this.customerService.getCustomer(order.customerid.toString());\n    let customer = customers[0];\n    order.customerName = customer.firstname + ' ' + customer.lastname;\n  }\n}\n","<div class=\"container-fluid\">\n  <h1>Order</h1>\n\n  <div class=\"row order\">\n    <div class=\"col data-column\">\n      <h2>Orders</h2>\n      <div class=\"detailItem\">\n        <img class=\"icon\" src=\"../../../assets/icons/date.png\" /> {{ order.date | date: 'longDate' }}\n      </div>\n      <div class=\"detailItem orderLink\" [routerLink]=\"['/customer/details', order.customerid]\">\n        <img class=\"icon\" src=\"../../../assets/icons/user.png\" /> {{ order.customerName }}\n      </div>\n      <div class=\"detailItem\">\n        <img class=\"icon\" src=\"../../../assets/icons/manufacturer.png\" /> {{ order.manufacturer }}\n      </div>\n      <div class=\"detailItem\"><img class=\"icon\" src=\"../../../assets/icons/product.png\" /> {{ order.name }}</div>\n      <div class=\"detailItem\"><img class=\"icon\" src=\"../../../assets/icons/currency.png\" /> {{ order.price }} Euro</div>\n      <div class=\"detailItem\"><img class=\"icon\" src=\"../../../assets/icons/counter.png\" /> {{ order.amount }} x</div>\n      <div class=\"detailItem\">\n        <img class=\"icon\" src=\"../../../assets/icons/bill.png\" />\n        {{ order.totalPrice | currency }}\n      </div>\n      <div class=\"detailItem\">\n        <img class=\"icon\" src=\"../../../assets/icons/status.png\" /> {{ orderStatusTypes[order.status] }}\n      </div>\n    </div>\n  </div>\n\n  <button type=\"button\" class=\"btn btn-primary btn-lg shadow-none\" [routerLink]=\"['/order/edit', order.id]\">\n    Edit\n  </button>\n  <button type=\"button\" class=\"btn btn-primary btn-lg shadow-none\" (click)=\"deleteOrder($event)\">Delete</button>\n  <button type=\"button\" class=\"btn btn-primary btn-lg shadow-none\" routerLink=\"/order/list\">\n    Back to Order List\n  </button>\n</div>\n","import { Component, OnInit, ElementRef, Renderer2 } from '@angular/core';\nimport { Order } from 'src/app/shared/model/order';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { OrderService } from 'src/app/shared/services/order/order.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Customer } from 'src/app/shared/model/customer';\nimport { Product } from 'src/app/shared/model/product';\nimport { CustomerService } from 'src/app/shared/services/customer/customer.service';\nimport { ProductService } from 'src/app/shared/services/product/product.service';\nimport { OrderStatus } from 'src/app/shared/enum/order-status';\n\n@Component({\n  selector: 'app-order-edit',\n  templateUrl: './order-edit.component.html',\n  styleUrls: ['./order-edit.component.scss'],\n})\nexport class OrderEditComponent implements OnInit {\n  id: any;\n  isNew: boolean = false;\n  order: Order;\n  allCustomers: Customer[];\n  allProducts: Product[];\n  form: FormGroup;\n  currentTab: number = 0;\n  lastTab: number = 2;\n  orderStatusTypes = OrderStatus;\n  orderStatusTypeOptions = [];\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private orderService: OrderService,\n    private customerService: CustomerService,\n    private productService: ProductService,\n    public snackBar: MatSnackBar,\n    private elem: ElementRef,\n    private renderer: Renderer2\n  ) {\n    this.activatedRoute.url.subscribe((params) => {\n      if (params[0].path === 'new') {\n        this.isNew = true;\n      }\n    });\n  }\n\n  get formControls() {\n    return this.form.controls;\n  }\n\n  submit() {\n    this.form.markAllAsTouched();\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.order = this.form.value as Order;\n\n    if (this.isNew) {\n      this.order.id = this.id;\n\n      this.orderService.insertOrder(this.order);\n      this.snackBar.open('Order added', null, {\n        duration: 5000,\n      });\n      this.router.navigate(['/order/list']);\n    } else {\n      this.orderService.updateOrder(this.order);\n      this.snackBar.open('Order updated', null, {\n        duration: 5000,\n      });\n      this.router.navigate(['/order/details', this.order.id]);\n    }\n  }\n\n  async ngOnInit() {\n    this.orderStatusTypeOptions = Object.keys(this.orderStatusTypes)\n      .map((key) => this.orderStatusTypes[key])\n      .filter((value) => typeof value !== 'string') as string[];\n\n    this.form = new FormGroup({\n      id: new FormControl(''),\n      customerid: new FormControl('', [Validators.required, Validators.minLength(36), Validators.maxLength(36)]),\n      productid: new FormControl('', [Validators.required, Validators.minLength(36), Validators.maxLength(36)]),\n      date: new FormControl('', [Validators.required]),\n      status: new FormControl('', [Validators.required]),\n      amount: new FormControl('', [Validators.required, Validators.min(1)]),\n    });\n\n    this.id = this.activatedRoute.snapshot.params.id;\n    let allCustomers = await this.customerService.getAllCustomers();\n    this.allCustomers = allCustomers;\n    this.allCustomers = this.allCustomers.sort((customer1, customer2) =>\n      customer1.lastname > customer2.lastname ? 1 : -1\n    );\n\n    let allProductsPromise = await this.productService.getAllProducts();\n    this.allProducts = allProductsPromise as Product[];\n    this.allProducts = this.allProducts.sort((product1, product2) => (product1.name > product2.name ? 1 : -1));\n\n    if (this.isNew) {\n      const uuid = uuidv4();\n      this.id = uuid;\n      this.order = new Order(this.id, null, null, null, null, null, null);\n\n      this.showTab(0);\n      return;\n    }\n\n    let orders = await this.orderService.getOrder(this.id);\n    this.order = orders[0];\n    this.showTab(0);\n    this.form.markAllAsTouched();\n    this.form.setValue(this.order);\n  }\n\n  showTab(newTab) {\n    let tabElements = this.elem.nativeElement.querySelectorAll('.tab');\n    let currentTabElement = tabElements[this.currentTab];\n    currentTabElement.style.display = 'none';\n    let newTabElement = tabElements[newTab];\n    newTabElement.style.display = 'block';\n\n    let navElements = this.elem.nativeElement.querySelectorAll('.breadcrumb-item');\n    let currentNavElement = navElements[this.currentTab];\n    this.renderer.removeClass(currentNavElement, 'active');\n    let newNavElement = navElements[newTab];\n    this.renderer.addClass(newNavElement, 'active');\n  }\n\n  previous() {\n    if (this.currentTab === 0) {\n      return;\n    }\n    this.showTab(this.currentTab - 1);\n    this.currentTab = this.currentTab - 1;\n  }\n  next() {\n    if (this.currentTab === this.lastTab) {\n      return;\n    }\n    this.showTab(this.currentTab + 1);\n    this.currentTab = this.currentTab + 1;\n  }\n\n  navigate(tab) {\n    this.showTab(tab);\n    this.currentTab = tab;\n  }\n}\n","<div class=\"container-fluid\">\n  <h1>Order</h1>\n\n  <nav aria-label=\"breadcrumb\">\n    <ol class=\"breadcrumb\">\n      <li class=\"breadcrumb-item\" (click)=\"navigate(0)\">General data</li>\n      <li class=\"breadcrumb-item\" (click)=\"navigate(1)\">Product data</li>\n      <li class=\"breadcrumb-item\" (click)=\"navigate(2)\">Order Status</li>\n    </ol>\n  </nav>\n\n  <form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n    <div class=\"tab\">\n      <h2>General data</h2>\n      <div class=\"form-group\">\n        <label for=\"id\">Id</label>\n        <input formControlName=\"id\" id=\"id\" type=\"text\" class=\"form-control\" [ngModel]=\"order.id\" readonly />\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"customerid\">Customer</label>\n        <select formControlName=\"customerid\" id=\"customerid\" class=\"form-control\" [ngModel]=\"order.customerid\">\n          <option *ngFor=\"let customer of allCustomers\" [value]=\"customer.id\"\n            >{{ customer.lastname }}, {{ customer.firstname }}</option\n          >\n        </select>\n\n        <div *ngIf=\"formControls.customerid.touched && formControls.customerid.invalid\" class=\"alert alert-danger\">\n          <div *ngIf=\"formControls.customerid.errors.required\">Customer is required.</div>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"date\">Date</label>\n        <input\n          formControlName=\"date\"\n          id=\"date\"\n          type=\"date\"\n          class=\"form-control\"\n          [ngModel]=\"order.date | date: 'yyyy-MM-dd'\"\n        />\n\n        <div *ngIf=\"formControls.date.touched && formControls.date.invalid\" class=\"alert alert-danger\">\n          <div *ngIf=\"formControls.date.errors.required\">Date is required.</div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"tab\">\n      <h2>Product data</h2>\n      <div class=\"form-group\">\n        <label for=\"productid\">Product</label>\n        <select formControlName=\"productid\" id=\"productid\" class=\"form-control\" [ngModel]=\"order.productid\">\n          <option *ngFor=\"let product of allProducts\" [value]=\"product.id\">{{ product.name }}</option>\n        </select>\n\n        <div *ngIf=\"formControls.productid.touched && formControls.productid.invalid\" class=\"alert alert-danger\">\n          <div *ngIf=\"formControls.productid.errors.required\">Product is required.</div>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"amount\">Amount</label>\n        <input formControlName=\"amount\" id=\"amount\" type=\"text\" class=\"form-control\" [ngModel]=\"order.amount\" />\n\n        <div *ngIf=\"formControls.amount.touched && formControls.amount.invalid\" class=\"alert alert-danger\">\n          <div *ngIf=\"formControls.amount.errors.required\">Amount is required.</div>\n          <div *ngIf=\"formControls.amount.errors.min\">\n            Amount should be at least 1.\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"tab\">\n      <h2>Order Status</h2>\n\n      <div class=\"form-group\">\n        <select formControlName=\"status\" id=\"status\" class=\"form-control\" [ngModel]=\"order.status\">\n          <option *ngFor=\"let key of orderStatusTypeOptions\" [value]=\"key\">{{ orderStatusTypes[key] }}</option>\n        </select>\n\n        <div *ngIf=\"formControls.status.touched && formControls.status.invalid\" class=\"alert alert-danger\">\n          <div *ngIf=\"formControls.status.errors.required\">Status is required.</div>\n        </div>\n      </div>\n    </div>\n\n    <button type=\"button\" class=\"btn btn-primary btn-lg shadow-none\" routerLink=\"/order/list\">Cancel</button>\n    <button\n      type=\"button\"\n      class=\"btn btn-primary btn-lg prev shadow-none\"\n      (click)=\"previous()\"\n      [disabled]=\"currentTab === 0\"\n    >\n      Previous\n    </button>\n    <button\n      type=\"button\"\n      class=\"btn btn-primary btn-lg next shadow-none\"\n      (click)=\"next()\"\n      [disabled]=\"currentTab === lastTab\"\n    >\n      Next\n    </button>\n    <button type=\"button\" class=\"btn btn-primary btn-lg shadow-none\" type=\"submit\">\n      Save\n    </button>\n  </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from 'src/app/shared/model/order';\nimport { OrderService } from 'src/app/shared/services/order/order.service';\nimport { ProductService } from 'src/app/shared/services/product/product.service';\nimport { Product } from 'src/app/shared/model/product';\nimport { CustomerService } from 'src/app/shared/services/customer/customer.service';\nimport { Customer } from 'src/app/shared/model/customer';\nimport { OrderStatus } from 'src/app/shared/enum/order-status';\n\n@Component({\n  selector: 'app-order-list',\n  templateUrl: './order-list.component.html',\n  styleUrls: ['./order-list.component.scss'],\n})\nexport class OrderListComponent implements OnInit {\n  loading: boolean = false;\n\n  orders: Order[];\n  allOrders: Order[];\n  orderStatusTypes = OrderStatus;\n  orderStatusTypeOptions = [];\n\n  constructor(\n    private orderService: OrderService,\n    private productService: ProductService,\n    private customerService: CustomerService\n  ) {}\n\n  filter(filterString: string, filterSelection: string) {\n    this.orders = this.allOrders.filter(function (elem) {\n      let filterValue;\n\n      switch (filterSelection) {\n        case 'name':\n          filterValue = elem.name;\n          break;\n        default:\n          filterValue = elem.name;\n      }\n\n      return filterValue.toUpperCase().includes(filterString.toUpperCase());\n    });\n\n    this.orders.sort((order1, order2) => (order1.name > order2.name ? 1 : -1));\n  }\n\n  async ngOnInit() {\n    this.orderStatusTypeOptions = Object.keys(this.orderStatusTypes)\n      .map((key) => this.orderStatusTypes[key])\n      .filter((value) => typeof value !== 'string') as string[];\n\n    this.loading = true;\n\n    let orders = await this.orderService.getAllOrders();\n    this.allOrders = orders as Order[];\n    this.allOrders = this.allOrders.slice(0, 100);\n\n    for (let order of this.allOrders) {\n      let products = await this.productService.getProduct(order.productid.toString());\n      let product = products[0];\n      order.name = product.name;\n      order.manufacturer = product.manufacturer;\n      order.price = product.price;\n\n      let customers = await this.customerService.getCustomer(order.customerid.toString());\n      let customer = customers[0];\n      order.customerName = customer.firstname + ' ' + customer.lastname;\n    }\n\n    this.allOrders.sort((order1, order2) => (order1.name > order2.name ? 1 : -1));\n    this.orders = this.allOrders;\n    this.loading = false;\n  }\n}\n","<div class=\"container-fluid\">\n  <div *ngIf=\"loading\" class=\"spinner\" role=\"status\"></div>\n\n  <button class=\"btn btn-primary addOrder shadow-none\" routerLink=\"/order/new\">New order</button>\n  <h1>Orders</h1>\n\n  <form class=\"form-inline\" action=\"#\" (submit)=\"filter(filterString.value, filterSelection.value)\">\n    <input type=\"text\" class=\"form-control\" #filterString placeholder=\"Filter value\" />\n    <select class=\"form-control\" #filterSelection>\n      <option value=\"name\">Name</option>\n    </select>\n    <button type=\"submit\" class=\"btn btn-primary shadow-none\">Submit</button>\n  </form>\n\n  <div class=\"row order-row\" *ngFor=\"let order of orders\" [routerLink]=\"['/order/details', order.id]\">\n    <div class=\"col order-name-col\">\n      <p class=\"title\">{{ order.manufacturer }}</p>\n      <h2>{{ order.name }}</h2>\n    </div>\n    <div class=\"col d-none d-sm-block order-col\">\n      <div>\n        <p [class]=\"orderStatusTypes[order.status]\">\n          <img class=\"icon\" src=\"../../../assets/icons/status.png\" />{{ orderStatusTypes[order.status] }}\n        </p>\n      </div>\n    </div>\n    <div class=\"col d-none d-sm-block order-col\">\n      <div>\n        <img class=\"icon\" src=\"../../../assets/icons/order.png\" />{{ order.amount }} items ordered on\n        {{ order.date | date: 'longDate' }}\n      </div>\n    </div>\n    <div class=\"col d-none d-lg-block order-col\">\n      <div>\n        <img class=\"icon\" src=\"../../../assets/icons/user.png\" />\n        {{ order.customerName }}\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../shared/services/authentication/auth.service';\nimport { Router } from '@angular/router';\nimport { v4 as uuidv4 } from 'uuid';\nimport { User } from '../shared/model/user';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n})\nexport class RegisterComponent implements OnInit {\n  user: User;\n  errorMessage: String;\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  ngOnInit(): void {\n    const uuid = uuidv4();\n    this.user = new User(uuid, null, null, null, null, null);\n  }\n\n  register() {\n    this.authService\n      .register(this.user)\n      .then((response) => {\n        this.router.navigate(['login']);\n      })\n      .catch((error) => {\n        this.errorMessage = 'An error occured during registration.';\n      });\n  }\n}\n","<form class=\"form-signin\">\n  <h1>Register</h1>\n  <label for=\"inputusername\" class=\"sr-only\">User name</label>\n  <input\n    type=\"text\"\n    name=\"username\"\n    id=\"inputusername\"\n    [(ngModel)]=\"user.username\"\n    class=\"form-control\"\n    placeholder=\"User name\"\n    required\n    autofocus\n  />\n  <label for=\"inputPassword\" class=\"sr-only\">Password</label>\n  <input\n    type=\"password\"\n    name=\"password\"\n    id=\"inputPassword\"\n    [(ngModel)]=\"user.password\"\n    class=\"form-control\"\n    placeholder=\"Password\"\n    required\n  />\n  <label for=\"inputfirstname\" class=\"sr-only\">First name</label>\n  <input\n    type=\"text\"\n    name=\"firstname\"\n    id=\"inputfirstname\"\n    [(ngModel)]=\"user.firstname\"\n    class=\"form-control\"\n    placeholder=\"First name\"\n    required\n    autofocus\n  />\n  <label for=\"inputlastname\" class=\"sr-only\">Last name</label>\n  <input\n    type=\"text\"\n    name=\"lastname\"\n    id=\"inputlastname\"\n    [(ngModel)]=\"user.lastname\"\n    class=\"form-control\"\n    placeholder=\"Last name\"\n    required\n    autofocus\n  />\n  <label for=\"inputemail\" class=\"sr-only\">E-Mail</label>\n  <input\n    type=\"text\"\n    name=\"email\"\n    id=\"inputemail\"\n    [(ngModel)]=\"user.email\"\n    class=\"form-control\"\n    placeholder=\"E-Mail\"\n    required\n    autofocus\n  />\n\n  <button class=\"btn btn-lg btn-primary btn-block\" (click)=\"register()\" type=\"button\">Register</button>\n  <p class=\"error\">{{ errorMessage }}</p>\n</form>\n","export enum Gender {\r\n  Male = 'Male',\r\n  Female = 'Female',\r\n  Other = 'Other',\r\n}\r\n","export enum OrderStatus {\r\n  Initialized = 0,\r\n  Sent = 1,\r\n  Processed = 2,\r\n  Archived = 3,\r\n}\r\n","export enum Title {\r\n  Mr = 'Mr',\r\n  Mrs = 'Mrs',\r\n  Ms = 'Ms',\r\n  Dr = 'Dr',\r\n  Rev = 'Rev',\r\n  Honorable = 'Honorable',\r\n}\r\n","import { Order } from './order';\r\n\r\nexport class Customer {\r\n  id: number;\r\n  firstname: string;\r\n  lastname: string;\r\n  title: string;\r\n  gender: string;\r\n  job: string;\r\n  birthdate: Date;\r\n  streetaddress: string;\r\n  postalcode: string;\r\n  city: string;\r\n  country: string;\r\n  currency: string;\r\n  phone: string;\r\n  email: string;\r\n\r\n  birthdateString: string;\r\n  orders: Order[];\r\n  numberOfOrders: number;\r\n\r\n  constructor(\r\n    id,\r\n    firstname,\r\n    lastname,\r\n    title,\r\n    gender,\r\n    job,\r\n    birthdate,\r\n    streetaddress,\r\n    postalcode,\r\n    city,\r\n    country,\r\n    currency,\r\n    phone,\r\n    email\r\n  ) {\r\n    this.id = id;\r\n    this.firstname = firstname;\r\n    this.lastname = lastname;\r\n    this.title = title;\r\n    this.gender = gender;\r\n    this.job = job;\r\n    this.birthdate = birthdate;\r\n    this.streetaddress = streetaddress;\r\n    this.postalcode = postalcode;\r\n    this.city = city;\r\n    this.country = country;\r\n    this.currency = currency;\r\n    this.phone = phone;\r\n    this.email = email;\r\n  }\r\n}\r\n","export class Order {\r\n  id: number;\r\n  customerid: number;\r\n  productid: number;\r\n  date: Date;\r\n  status: number;\r\n  amount: number;\r\n  timestamp: Date;\r\n\r\n  name: string;\r\n  manufacturer: string;\r\n  price: string;\r\n  totalPrice: number;\r\n\r\n  customerName: string;\r\n\r\n  constructor(id, customerid, productid, date, status, amount, timestamp) {\r\n    this.id = id;\r\n    this.customerid = customerid;\r\n    this.productid = productid;\r\n    this.date = date;\r\n    this.status = status;\r\n    this.amount = amount;\r\n    this.timestamp = timestamp;\r\n  }\r\n}\r\n","export class User {\r\n  id: number;\r\n  firstname: string;\r\n  lastname: string;\r\n  password: string;\r\n  username: string;\r\n  email: string;\r\n\r\n  constructor(id, firstname, lastname, password, username, email) {\r\n    this.id = id;\r\n    this.firstname = firstname;\r\n    this.lastname = lastname;\r\n    this.password = password;\r\n    this.username = username;\r\n    this.email = email;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuardService implements CanActivate {\n  constructor(private authService: AuthService, private route: Router) {}\n\n  canActivate() {\n    if (this.authService.isAuthenticated()) {\n      return true;\n    }\n    this.route.navigate(['login']);\n    return false;\n  }\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  currentUserId: string;\n  loggedInUserInfo: {};\n  userAuthenticated: EventEmitter<Boolean>;\n\n  constructor(private http: HttpClient) {\n    this.userAuthenticated = new EventEmitter();\n  }\n\n  public isAuthenticated(): Boolean {\n    let userId = localStorage.getItem('userId');\n    if (userId && JSON.parse(userId)) {\n      return true;\n    }\n    return false;\n  }\n\n  public logout() {\n    localStorage.removeItem('userId');\n    this.userAuthenticated.emit(false);\n  }\n\n  public setUserInfo(userId) {\n    localStorage.setItem('userId', JSON.stringify(userId));\n    this.currentUserId = userId;\n    this.userAuthenticated.emit(true);\n  }\n\n  public getCurrentUserId() {\n    let userIdJSON = localStorage.getItem('userId');\n    let userId = JSON.parse(userIdJSON);\n\n    return userId.user;\n  }\n\n  public validate(email, password) {\n    return this.http\n      .post('https://customers-backend.herokuapp.com/api/authenticate', { username: email, password: password })\n      .toPromise();\n  }\n\n  public register(user) {\n    return this.http.post('https://customers-backend.herokuapp.com/api/register', user).toPromise();\n  }\n}\n","import { Injectable, EventEmitter } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ConnectionService {\r\n  interval: any;\r\n  connectionChanged: EventEmitter<Boolean>;\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.connectionChanged = new EventEmitter();\r\n    this.InitializeConnectionCheck();\r\n  }\r\n\r\n  async checkConnection() {\r\n    let checkConnectionResult;\r\n\r\n    await this.http\r\n      .get('https://customers-backend.herokuapp.com/api/connect')\r\n      .toPromise()\r\n      .then(() => {\r\n        checkConnectionResult = true;\r\n      })\r\n      .catch((error) => {\r\n        checkConnectionResult = false;\r\n      });\r\n\r\n    return checkConnectionResult;\r\n  }\r\n\r\n  goOffline() {\r\n    this.connectionChanged.emit(false);\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  goOnline() {\r\n    this.InitializeConnectionCheck();\r\n  }\r\n\r\n  InitializeConnectionCheck() {\r\n    this.interval = setInterval(async () => {\r\n      let connectionCheckResult = await this.checkConnection();\r\n      this.connectionChanged.emit(connectionCheckResult);\r\n    }, 5000);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Customer } from 'src/app/shared/model/customer';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerService {\n  constructor(private http: HttpClient) {}\n\n  async getAllCustomers(): Promise<Customer[]> {\n    return await this.http.get<Customer[]>('https://customers-backend.herokuapp.com/api/customers').toPromise();\n  }\n\n  async getCustomer(id: string): Promise<Customer[]> {\n    return await this.http.get<Customer[]>('https://customers-backend.herokuapp.com/api/customers/' + id).toPromise();\n  }\n\n  async insertCustomer(Customer: Customer) {\n    return await this.http.post('https://customers-backend.herokuapp.com/api/customers/', Customer).toPromise();\n  }\n\n  async updateCustomer(Customer: Customer) {\n    return await this.http\n      .put('https://customers-backend.herokuapp.com/api/customers/' + Customer.id, Customer)\n      .toPromise();\n  }\n\n  async deleteCustomer(id: string) {\n    return await this.http.delete('https://customers-backend.herokuapp.com/api/customers/' + id).toPromise();\n  }\n}\n","import { Injectable, EventEmitter } from '@angular/core';\r\nimport { Customer } from '../../model/customer';\r\nimport { Order } from '../../model/order';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class IndexedDatabaseService {\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    let db;\r\n    let dbReq = indexedDB.open('customersDB', 2);\r\n\r\n    dbReq.onupgradeneeded = function (event: any) {\r\n      db = event.target.result;\r\n      db.createObjectStore('customer', { autoIncrement: true });\r\n      db.createObjectStore('order', { autoIncrement: true });\r\n    };\r\n\r\n    dbReq.onsuccess = function (event: any) {\r\n      db = event.target.result;\r\n    };\r\n\r\n    dbReq.onerror = function (event: any) {\r\n      alert('error opening database ' + event.target.errorCode);\r\n    };\r\n  }\r\n\r\n  storeItemsInDatabase(type: string, items: any[]) {\r\n    let indexedDB = window.indexedDB;\r\n    let open = indexedDB.open('customersDB', 2);\r\n\r\n    open.onsuccess = function () {\r\n      let db = open.result;\r\n      let transaction = db.transaction([type], 'readwrite');\r\n      let store = transaction.objectStore(type);\r\n      store.clear();\r\n\r\n      for (let item of items) {\r\n        store.add(item);\r\n      }\r\n\r\n      transaction.oncomplete = function () {\r\n        console.log('All ' + type + 's stored in IndexedDB.');\r\n      };\r\n      transaction.onerror = function (event: any) {\r\n        alert('Error storing ' + type + ' ' + event.target.errorCode);\r\n      };\r\n    };\r\n  }\r\n\r\n  addCustomersToDatabase(customers: Customer[]) {\r\n    this.storeItemsInDatabase('customer', customers);\r\n  }\r\n\r\n  addOrdersToDatabase(orders: Order[]) {\r\n    this.storeItemsInDatabase('order', orders);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Order } from '../../model/order';\nimport { ProductService } from '../product/product.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderService {\n  constructor(private http: HttpClient, private productService: ProductService) {}\n\n  async getAllOrders(): Promise<Order[]> {\n    return await this.http.get<Order[]>('https://customers-backend.herokuapp.com/api/orders').toPromise();\n  }\n\n  async getAllOrdersOfCustomer(customerid: string) {\n    let ordersOfCustomer = await this.http\n      .get<Order[]>('https://customers-backend.herokuapp.com/api/ordersOfCustomer/' + customerid)\n      .toPromise();\n\n    for (let order of ordersOfCustomer) {\n      let products = await this.productService.getProduct(order.productid.toString());\n      let product = products[0];\n\n      order.name = product.name;\n      order.manufacturer = product.manufacturer;\n      order.price = product.price;\n    }\n\n    return ordersOfCustomer;\n  }\n\n  async getOrder(id: string): Promise<Order[]> {\n    return await this.http.get<Order[]>('https://customers-backend.herokuapp.com/api/orders/' + id).toPromise();\n  }\n\n  async insertOrder(order: Order) {\n    return await this.http.post('https://customers-backend.herokuapp.com/api/orders/', order).toPromise();\n  }\n\n  async updateOrder(order: Order) {\n    return this.http.put('https://customers-backend.herokuapp.com/api/orders/' + order.id, order).toPromise();\n  }\n\n  async deleteOrder(id: string) {\n    return this.http.delete('https://customers-backend.herokuapp.com/api/orders/' + id).toPromise();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Product } from '../../model/product';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductService {\n  constructor(private http: HttpClient) {}\n\n  async getAllProducts(): Promise<Product[]> {\n    return this.http.get<Product[]>('https://customers-backend.herokuapp.com/api/products').toPromise();\n  }\n\n  async getProduct(id: string): Promise<Product[]> {\n    return this.http.get<Product[]>('https://customers-backend.herokuapp.com/api/products/' + id).toPromise();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { User } from '../../model/user';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  constructor(private http: HttpClient) {}\n\n  async getUser(id: string): Promise<User[]> {\n    return this.http.get<User[]>('https://customers-backend.herokuapp.com/api/users/' + id).toPromise();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CustomerService } from './services/customer/customer.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { IndexedDatabaseService } from './services/database/indexed-database.service';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, HttpClientModule],\n  providers: [CustomerService, IndexedDatabaseService],\n})\nexport class SharedModule {}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { User } from '../shared/model/user';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.scss'],\n})\nexport class UserComponent implements OnInit {\n  @Input()\n  object: any;\n  user: User;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.user = this.object as User;\n  }\n}\n","<p><img class=\"icon\" src=\"../../../assets/icons/user.png\" /> {{ user.firstname }} {{ user.lastname }}</p>\n<p><img class=\"icon\" src=\"../../../assets/icons/counter.png\" /> {{ user.id }}</p>\n<p><img class=\"icon\" src=\"../../../assets/icons/mail.png\" /> {{ user.email }}</p>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}
{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/common-components/confirm-dialog/confirm-dialog.component.ts","webpack:///src/app/common-components/confirm-dialog/confirm-dialog.component.html","webpack:///src/app/common-components/modal-dialog/modal-dialog.component.ts","webpack:///src/app/common-components/modal-dialog/modal-dialog.component.html","webpack:///src/app/customer/customer-details/customer-details.component.html","webpack:///src/app/customer/customer-details/customer-details.component.ts","webpack:///src/app/customer/customer-edit/customer-edit.component.html","webpack:///src/app/customer/customer-edit/customer-edit.component.ts","webpack:///src/app/customer/customer-list/customer-list.component.html","webpack:///src/app/customer/customer-list/customer-list.component.ts","webpack:///src/app/customer/customer-list/index.ts","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/order/order-details/order-details.component.ts","webpack:///src/app/order/order-details/order-details.component.html","webpack:///src/app/order/order-edit/order-edit.component.html","webpack:///src/app/order/order-edit/order-edit.component.ts","webpack:///src/app/order/order-list/order-list.component.html","webpack:///src/app/order/order-list/order-list.component.ts","webpack:///src/app/register/register.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/shared/enum/gender.ts","webpack:///src/app/shared/enum/order-status.ts","webpack:///src/app/shared/enum/title.ts","webpack:///src/app/shared/model/customer.ts","webpack:///src/app/shared/model/order.ts","webpack:///src/app/shared/model/user.ts","webpack:///src/app/shared/services/authentication/auth-guard.service.ts","webpack:///src/app/shared/services/authentication/auth.service.ts","webpack:///src/app/shared/services/connection/connection.service.ts","webpack:///src/app/shared/services/customer/customer.service.ts","webpack:///src/app/shared/services/database/indexed-database.service.ts","webpack:///src/app/shared/services/order/order.service.ts","webpack:///src/app/shared/services/product/product.service.ts","webpack:///src/app/shared/services/user/user.service.ts","webpack:///src/app/shared/shared.module.ts","webpack:///src/app/user/user.component.ts","webpack:///src/app/user/user.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","canActivate","children","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","AppComponent","dialog","IndexedDatabaseService","userService","router","authService","connectionService","title","isAuthenticated","userAuthenticated","subscribe","connectionChanged","isOnline","event","goOffline","goOnline","dialogConfig","disableClose","userId","getCurrentUserId","getUser","users","user","data","username","object","open","dialogData","dialogRef","maxWidth","afterClosed","dialogResult","result","logout","navigate","ngOnInit","selector","templateUrl","styleUrls","AppModule","declarations","providers","entryComponents","bootstrap","ConfirmDialogComponent","message","close","onDismiss","onConfirm","ConfirmDialogModel","ModalDialogComponent","closeModal","CustomerDetailsComponent","activatedRoute","customerService","orderService","snackBar","deleteCustomer","customer","toString","firstname","lastname","duration","snapshot","params","getCustomer","customers","getAllOrdersOfCustomer","orders","CustomerEditComponent","isNew","genderTypes","genderTypeOptions","titleTypes","titleTypeOptions","url","form","markAllAsTouched","invalid","value","insertCustomer","updateCustomer","Object","required","minLength","gender","job","birthdate","streetaddress","postalcode","city","country","maxLength","currency","phone","email","uuid","setValue","controls","submit","CustomerListComponent","indexedDatabaseService","loading","isLocalDataLoaded","filterString","filterSelection","allCustomers","filter","elem","filterValue","toUpperCase","includes","sort","customer1","customer2","checkConnection","connectionToServer","getAllCustomers","addCustomersToDatabase","getAllOrders","allOrders","addOrdersToDatabase","displayCustomers","customerAsCustomer","ordersOfCustomer","x","customerid","numberOfOrders","length","LoginComponent","validate","userPassword","response","setUserInfo","error","errorMessage","login","OrderDetailsComponent","productService","orderStatusTypes","orderStatusTypeOptions","deleteOrder","order","name","map","key","getOrder","getProduct","productid","products","product","manufacturer","price","totalPrice","amount","Number","customerName","OrderEditComponent","renderer","currentTab","lastTab","insertOrder","updateOrder","date","status","min","getAllProducts","allProductsPromise","allProducts","product1","product2","showTab","newTab","tabElements","nativeElement","querySelectorAll","currentTabElement","style","display","newTabElement","navElements","currentNavElement","removeClass","newNavElement","addClass","tab","previous","next","OrderListComponent","order1","order2","slice","RegisterComponent","register","Gender","OrderStatus","Title","Customer","Order","timestamp","User","password","AuthGuardService","route","providedIn","AuthService","http","localStorage","getItem","JSON","parse","removeItem","emit","setItem","stringify","currentUserId","userIdJSON","post","toPromise","ConnectionService","InitializeConnectionCheck","get","checkConnectionResult","clearInterval","interval","setInterval","connectionCheckResult","CustomerService","put","db","dbReq","indexedDB","onupgradeneeded","target","createObjectStore","autoIncrement","onsuccess","onerror","alert","errorCode","type","items","window","transaction","store","objectStore","clear","item","add","oncomplete","console","log","storeItemsInDatabase","OrderService","ProductService","UserService","SharedModule","UserComponent","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CustomerListComponent } from './customer/customer-list/customer-list.component';\r\nimport { CustomerDetailsComponent } from './customer/customer-details/customer-details.component';\r\nimport { CustomerEditComponent } from './customer/customer-edit/customer-edit.component';\r\nimport { OrderDetailsComponent } from './order/order-details/order-details.component';\r\nimport { OrderEditComponent } from './order/order-edit/order-edit.component';\r\nimport { OrderListComponent } from './order/order-list/order-list.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { AuthGuardService } from './shared/services/authentication/auth-guard.service';\r\nimport { RegisterComponent } from './register/register.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'login', component: LoginComponent },\r\n  {\r\n    path: 'customer',\r\n    canActivate: [AuthGuardService],\r\n    children: [\r\n      { path: '', redirectTo: 'list', pathMatch: 'full' },\r\n      { path: 'list', component: CustomerListComponent },\r\n      { path: 'details/:id', component: CustomerDetailsComponent },\r\n      { path: 'edit/:id', component: CustomerEditComponent },\r\n      { path: 'new', component: CustomerEditComponent },\r\n    ],\r\n  },\r\n  {\r\n    path: 'order',\r\n    canActivate: [AuthGuardService],\r\n    children: [\r\n      { path: '', redirectTo: 'list', pathMatch: 'full' },\r\n      { path: 'list', component: OrderListComponent },\r\n      { path: 'details/:id', component: OrderDetailsComponent },\r\n      { path: 'edit/:id', component: OrderEditComponent },\r\n      { path: 'new', component: OrderEditComponent },\r\n    ],\r\n  },\r\n  { path: 'register', component: RegisterComponent, pathMatch: 'full' },\r\n  { path: '', redirectTo: 'login', pathMatch: 'full' },\r\n  { path: '*', redirectTo: 'login', pathMatch: 'full' },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n","<nav class=\"navbar navbar-expand-lg\">\r\n  <img class=\"logo\" src=\"../../../assets/icons/logo.png\" />\r\n  <h1>Customers Application</h1>\r\n  <button\r\n    class=\"navbar-toggler\"\r\n    type=\"button\"\r\n    data-toggle=\"collapse\"\r\n    data-target=\"#navbarNavAltMarkup\"\r\n    aria-controls=\"navbarNavAltMarkup\"\r\n    aria-expanded=\"false\"\r\n    aria-label=\"Toggle navigation\"\r\n  >\r\n    <span class=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n  <div *ngIf=\"isAuthenticated\" class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n    <div class=\"navbar-nav\">\r\n      <a\r\n        class=\"nav-item nav-link\"\r\n        routerLinkActive=\"active-link\"\r\n        [routerLinkActiveOptions]=\"{ exact: false }\"\r\n        routerLink=\"/customer\"\r\n        >Customers</a\r\n      >\r\n      <a\r\n        class=\"nav-item nav-link\"\r\n        routerLinkActive=\"active-link\"\r\n        [routerLinkActiveOptions]=\"{ exact: false }\"\r\n        routerLink=\"/order\"\r\n        >Orders</a\r\n      >\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"isAuthenticated\" class=\"menu-actions\">\r\n    <img class=\"menu-item profile\" src=\"../../../assets/icons/profile.png\" (click)=\"showProfile($event)\" />\r\n\r\n    <img\r\n      *ngIf=\"isOnline\"\r\n      class=\"menu-item onlineOffline\"\r\n      src=\"../../../assets/icons/online.png\"\r\n      (click)=\"goOffline($event)\"\r\n    />\r\n    <img\r\n      *ngIf=\"!isOnline\"\r\n      class=\"menu-item onlineOffline\"\r\n      src=\"../../../assets/icons/offline.png\"\r\n      (click)=\"goOnline($event)\"\r\n    />\r\n\r\n    <img class=\"menu-item settings\" src=\"../../../assets/icons/logout.png\" (click)=\"logout($event)\" />\r\n  </div>\r\n</nav>\r\n\r\n<router-outlet></router-outlet>\r\n","import { Component } from '@angular/core';\nimport {\n  ConfirmDialogModel,\n  ConfirmDialogComponent,\n} from './common-components/confirm-dialog/confirm-dialog.component';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { IndexedDatabaseService } from './shared/services/database/indexed-database.service';\nimport { Router } from '@angular/router';\nimport { AuthService } from './shared/services/authentication/auth.service';\nimport { ConnectionService } from './shared/services/connection/connection.service';\nimport { ModalDialogComponent } from './common-components/modal-dialog/modal-dialog.component';\nimport { UserService } from './shared/services/user/user.service';\nimport { User } from './shared/model/user';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'customers';\n  indexedDatabaseService: IndexedDatabaseService;\n  isAuthenticated: Boolean = false;\n  isOnline: Boolean;\n\n  constructor(\n    public dialog: MatDialog,\n    private IndexedDatabaseService: IndexedDatabaseService,\n    private userService: UserService,\n    private router: Router,\n    private authService: AuthService,\n    private connectionService: ConnectionService\n  ) {\n    authService.userAuthenticated.subscribe((isAuthenticated) => {\n      this.isAuthenticated = isAuthenticated;\n    });\n\n    connectionService.connectionChanged.subscribe((isOnline) => {\n      this.isOnline = isOnline;\n    });\n  }\n\n  goOffline(event) {\n    this.connectionService.goOffline();\n  }\n\n  goOnline(event) {\n    this.connectionService.goOnline();\n  }\n\n  async showProfile(event) {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = true;\n    dialogConfig.id = 'modal-component';\n\n    let userId = this.authService.getCurrentUserId();\n    let users = await this.userService.getUser(userId);\n    let user = users[0] as User;\n\n    dialogConfig.data = { title: user.username, object: user };\n\n    this.dialog.open(ModalDialogComponent, dialogConfig);\n  }\n\n  logout(event) {\n    const dialogData = new ConfirmDialogModel('Logout', 'Do you want to logout?');\n\n    let dialogRef = this.dialog.open(ConfirmDialogComponent, {\n      maxWidth: '400px',\n      data: dialogData,\n    });\n\n    dialogRef.afterClosed().subscribe((dialogResult) => {\n      const result = dialogResult;\n\n      if (result) {\n        this.authService.logout();\n        this.router.navigate(['/login']);\n      }\n    });\n  }\n\n  ngOnInit() {\n    this.IndexedDatabaseService.ngOnInit();\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { CustomerModule } from 'src/app/customer/customer.module';\r\nimport { SharedModule } from './shared/shared.module';\r\nimport { CustomerListComponent } from './customer/customer-list';\r\nimport { CustomerDetailsComponent } from './customer/customer-details/customer-details.component';\r\nimport { CustomerEditComponent } from './customer/customer-edit/customer-edit.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ConfirmDialogComponent } from './common-components/confirm-dialog/confirm-dialog.component';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { OrderDetailsComponent } from './order/order-details/order-details.component';\r\nimport { OrderModule } from './order/order.module';\r\nimport { OrderEditComponent } from './order/order-edit/order-edit.component';\r\nimport { OrderListComponent } from './order/order-list/order-list.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { ModalDialogComponent } from './common-components/modal-dialog/modal-dialog.component';\r\nimport { UserComponent } from './user/user.component';\r\nimport { RegisterComponent } from './register/register.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    CustomerListComponent,\r\n    CustomerDetailsComponent,\r\n    CustomerEditComponent,\r\n    ConfirmDialogComponent,\r\n    OrderDetailsComponent,\r\n    OrderEditComponent,\r\n    OrderListComponent,\r\n    LoginComponent,\r\n    ModalDialogComponent,\r\n    UserComponent,\r\n    RegisterComponent,\r\n  ],\r\n  imports: [\r\n    AppRoutingModule,\r\n    BrowserModule,\r\n    FormsModule,\r\n    MatDialogModule,\r\n    MatSnackBarModule,\r\n    NgbModule,\r\n    ReactiveFormsModule,\r\n    SharedModule,\r\n    BrowserAnimationsModule,\r\n  ],\r\n  providers: [],\r\n  entryComponents: [ConfirmDialogComponent, ModalDialogComponent],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Component, OnInit, Inject } from '@angular/core';\n\n@Component({\n  selector: 'app-confirm-dialog',\n  templateUrl: './confirm-dialog.component.html',\n  styleUrls: ['./confirm-dialog.component.scss']\n})\nexport class ConfirmDialogComponent implements OnInit {\n  title: string;\n  message: string;\n\n  constructor(public dialogRef: MatDialogRef<ConfirmDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: ConfirmDialogModel) {    \n    this.title = data.title;\n    this.message = data.message;\n  }\n\n  ngOnInit() {\n  }\n\n  onConfirm(): void {   \n    this.dialogRef.close(true);\n  }\n\n  onDismiss(): void {   \n    this.dialogRef.close(false);\n  }\n}\n\nexport class ConfirmDialogModel {\n\n  constructor(public title: string, public message: string) {\n  }\n}\n","<h2>\n  {{ title }}\n</h2>\n\n<div>\n  <p class=\"text\">{{ message }}</p>\n</div>\n\n<div mat-dialog-actions>\n  <button class=\"btn btn-primary btn-lg btn-danger shadow-none\" mat-button (click)=\"onDismiss()\">No</button>\n  <button\n    class=\"btn btn-primary btn-lg btn-success shadow-none\"\n    mat-raised-button\n    color=\"primary\"\n    (click)=\"onConfirm()\"\n  >\n    Yes\n  </button>\n</div>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-modal-dialog',\n  templateUrl: './modal-dialog.component.html',\n  styleUrls: ['./modal-dialog.component.scss'],\n})\nexport class ModalDialogComponent implements OnInit {\n  public title: String;\n  public object: any;\n\n  constructor(public dialogRef: MatDialogRef<ModalDialogComponent>, @Inject(MAT_DIALOG_DATA) public data: any) {\n    this.title = data.title;\n    this.object = data.object;\n  }\n\n  ngOnInit() {}\n\n  closeModal() {\n    this.dialogRef.close();\n  }\n}\n","<div id=\"modal-content-wrapper\">\n  <header>\n    <h2>{{ title }}</h2>\n  </header>\n  <section>\n    <app-user [object]=\"object\"></app-user>\n  </section>\n  <footer>\n    <button class=\"btn\" (click)=\"closeModal()\">Close</button>\n  </footer>\n</div>\n","<div class=\"container-fluid\">\n  <h1>{{ customer.title }} {{ customer.firstname }} {{ customer.lastname }}</h1>\n\n  <div class=\"row customer\">\n    <div class=\"col data-column\">\n      <h2>User Data</h2>\n      <div class=\"detailItem\">\n        <img class=\"icon\" src=\"../../../assets/icons/birth.png\" />{{ customer.birthdate | date: 'longDate' }}\n      </div>\n      <div class=\"detailItem\"><img class=\"icon\" src=\"../../../assets/icons/gender.png\" />{{ customer.gender }}</div>\n      <div class=\"detailItem\"><img class=\"icon\" src=\"../../../assets/icons/job.png\" />{{ customer.job }}</div>\n      <div class=\"detailItem\">\n        <img class=\"icon\" src=\"../../../assets/icons/map.png\" />{{ customer.streetaddress }}, {{ customer.postalcode }}\n        {{ customer.city }} ({{ customer.country }})\n      </div>\n      <div class=\"detailItem\"><img class=\"icon\" src=\"../../../assets/icons/currency.png\" />{{ customer.currency }}</div>\n      <div class=\"detailItem\"><img class=\"icon\" src=\"../../../assets/icons/phone.png\" />{{ customer.phone }}</div>\n      <div class=\"detailItem\"><img class=\"icon\" src=\"../../../assets/icons/mail.png\" />{{ customer.email }}</div>\n    </div>\n    <div class=\"w-100 d-block d-md-none\"></div>\n    <div class=\"col data-column\">\n      <h2>Orders</h2>\n      <div\n        class=\"detailItem orderLink\"\n        *ngFor=\"let order of customer.orders\"\n        [routerLink]=\"['/order/details', order.id]\"\n      >\n        <img class=\"icon\" src=\"../../../assets/icons/order.png\" /> {{ order.amount }} x {{ order.name }} ({{\n          order.manufacturer\n        }}) --- {{ order.amount * order.price | currency }}\n      </div>\n      <div class=\"detailItem\" *ngIf=\"customer.orders.length == 0\">\n        <img class=\"icon\" src=\"../../../assets/icons/order.png\" />No orders\n      </div>\n    </div>\n    <div class=\"w-100 d-block d-lg-none\"></div>\n    <div class=\"col data-column\">\n      <h2>Issues</h2>\n      <div class=\"detailItem\"><img class=\"icon\" src=\"../../../assets/icons/issue.png\" />No issues</div>\n    </div>\n  </div>\n\n  <button type=\"button\" class=\"btn btn-primary btn-lg shadow-none\" [routerLink]=\"['/customer/edit', customer.id]\">\n    Edit\n  </button>\n  <button type=\"button\" class=\"btn btn-primary btn-lg shadow-none\" (click)=\"deleteCustomer($event)\">Delete</button>\n  <button type=\"button\" class=\"btn btn-primary btn-lg shadow-none\" routerLink=\"/customer/list\">\n    Back to Customer List\n  </button>\n</div>\n","import { Component, OnInit } from '@angular/core';\r\nimport { Customer } from 'src/app/shared/model/customer';\r\nimport { CustomerService } from 'src/app/shared/services/customer/customer.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport {\r\n  ConfirmDialogComponent,\r\n  ConfirmDialogModel,\r\n} from 'src/app/common-components/confirm-dialog/confirm-dialog.component';\r\nimport { Order } from 'src/app/shared/model/order';\r\nimport { Product } from 'src/app/shared/model/product';\r\nimport { OrderService } from 'src/app/shared/services/order/order.service';\r\n\r\n@Component({\r\n  selector: 'app-customer-details',\r\n  templateUrl: './customer-details.component.html',\r\n  styleUrls: ['./customer-details.component.scss'],\r\n})\r\nexport class CustomerDetailsComponent implements OnInit {\r\n  id: any;\r\n  customer: Customer;\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router,\r\n    private customerService: CustomerService,\r\n    private orderService: OrderService,\r\n    public dialog: MatDialog,\r\n    public snackBar: MatSnackBar\r\n  ) {}\r\n\r\n  deleteCustomer(event) {\r\n    const dialogData = new ConfirmDialogModel('Confirm Action', 'Are you sure young want to delete customer?');\r\n\r\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\r\n      maxWidth: '400px',\r\n      data: dialogData,\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((dialogResult) => {\r\n      const result = dialogResult;\r\n\r\n      if (result) {\r\n        this.customerService.deleteCustomer(this.customer.id.toString());\r\n        this.snackBar.open('Customer ' + this.customer.firstname + ' ' + this.customer.lastname + ' deleted', null, {\r\n          duration: 5000,\r\n        });\r\n        this.router.navigate(['/customer/list']);\r\n      }\r\n    });\r\n  }\r\n\r\n  async ngOnInit() {\r\n    this.id = this.activatedRoute.snapshot.params.id;\r\n    let customers = await this.customerService.getCustomer(this.id);\r\n    let customer = customers[0] as Customer;\r\n    customer.orders = await this.orderService.getAllOrdersOfCustomer(this.id);\r\n    this.customer = customer;\r\n  }\r\n}\r\n","<div class=\"container-fluid\">\r\n  <h1>Editing: {{ customer.firstname }} {{ customer.lastname }}</h1>\r\n\r\n  <form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\r\n    <div class=\"row\">\r\n      <div class=\"form-group\">\r\n        <label for=\"id\">Id</label>\r\n        <input formControlName=\"id\" id=\"id\" type=\"text\" class=\"form-control\" [ngModel]=\"customer.id\" readonly />\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"form-group\">\r\n        <label for=\"title\">Title</label>\r\n        <select formControlName=\"title\" id=\"title\" class=\"form-control\" [ngModel]=\"customer.title\">\r\n          <option *ngFor=\"let key of titleTypeOptions\" [value]=\"key\">{{ key }}</option>\r\n        </select>\r\n\r\n        <div *ngIf=\"formControls.title.touched && formControls.title.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.title.errors.required\">Title is required.</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"w-100 d-block d-md-none\"></div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"firstname\">First name</label>\r\n        <input\r\n          formControlName=\"firstname\"\r\n          id=\"firstname\"\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          [ngModel]=\"customer.firstname\"\r\n        />\r\n\r\n        <div *ngIf=\"formControls.firstname.touched && formControls.firstname.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.firstname.errors.required\">First name is required.</div>\r\n          <div *ngIf=\"formControls.firstname.errors.minlength\">First name should be at least 2 characters long.</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"w-100 d-block d-md-none\"></div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"lastname\">Last name</label>\r\n        <input\r\n          formControlName=\"lastname\"\r\n          id=\"lastname\"\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          [ngModel]=\"customer.lastname\"\r\n        />\r\n\r\n        <div *ngIf=\"formControls.lastname.touched && formControls.lastname.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.lastname.errors.required\">Last name is required.</div>\r\n          <div *ngIf=\"formControls.lastname.errors.minlength\">Last name should be at least 2 characters long.</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"form-group\">\r\n        <label for=\"gender\">Gender</label>\r\n        <select formControlName=\"gender\" id=\"gender\" class=\"form-control\" [ngModel]=\"customer.gender\">\r\n          <option *ngFor=\"let key of genderTypeOptions\" [value]=\"key\">{{ key }}</option>\r\n        </select>\r\n\r\n        <div *ngIf=\"formControls.gender.touched && formControls.gender.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.gender.errors.required\">Gender is required.</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"w-100 d-block d-md-none\"></div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"job\">Job</label>\r\n        <input formControlName=\"job\" id=\"job\" type=\"text\" class=\"form-control\" [ngModel]=\"customer.job\" />\r\n      </div>\r\n\r\n      <div class=\"w-100 d-block d-md-none\"></div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"birthdate\">Birth date</label>\r\n        <input\r\n          formControlName=\"birthdate\"\r\n          id=\"birthdate\"\r\n          type=\"date\"\r\n          class=\"form-control\"\r\n          [ngModel]=\"customer.birthdate | date: 'yyyy-MM-dd'\"\r\n        />\r\n\r\n        <div *ngIf=\"formControls.birthdate.touched && formControls.birthdate.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.birthdate.errors.required\">Birth date is required.</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"form-group\">\r\n        <label for=\"streetaddress\">Street address</label>\r\n        <input\r\n          formControlName=\"streetaddress\"\r\n          id=\"streetaddress\"\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          [ngModel]=\"customer.streetaddress\"\r\n        />\r\n\r\n        <div\r\n          *ngIf=\"formControls.streetaddress.touched && formControls.streetaddress.invalid\"\r\n          class=\"alert alert-danger\"\r\n        >\r\n          <div *ngIf=\"formControls.streetaddress.errors.required\">Street address is required.</div>\r\n          <div *ngIf=\"formControls.streetaddress.errors.minlength\">\r\n            Street address should be at least 4 characters long.\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"w-100 d-block d-md-none\"></div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"postalcode\">Postal code</label>\r\n        <input\r\n          formControlName=\"postalcode\"\r\n          id=\"postalcode\"\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          [ngModel]=\"customer.postalcode\"\r\n        />\r\n\r\n        <div *ngIf=\"formControls.postalcode.touched && formControls.postalcode.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.postalcode.errors.required\">Postal code is required.</div>\r\n          <div *ngIf=\"formControls.postalcode.errors.minlength\">\r\n            Postal code should be at least 4 characters long.\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"w-100 d-block d-md-none\"></div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"city\">City</label>\r\n        <input formControlName=\"city\" id=\"city\" type=\"text\" class=\"form-control\" [ngModel]=\"customer.city\" />\r\n\r\n        <div *ngIf=\"formControls.city.touched && formControls.city.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.city.errors.required\">City is required.</div>\r\n          <div *ngIf=\"formControls.city.errors.minlength\">\r\n            City should be at least 4 characters long.\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"w-100 d-block d-md-none\"></div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"country\">Country</label>\r\n        <input formControlName=\"country\" id=\"country\" type=\"text\" class=\"form-control\" [ngModel]=\"customer.country\" />\r\n\r\n        <div *ngIf=\"formControls.country.touched && formControls.country.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.country.errors.required\">Country code is required.</div>\r\n          <div *ngIf=\"formControls.country.errors.minlength || formControls.country.errors.maxlength\">\r\n            Country code should be exactly 2 characters long.\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"form-group\">\r\n        <label for=\"currency\">Currency</label>\r\n        <input\r\n          formControlName=\"currency\"\r\n          id=\"currency\"\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          [ngModel]=\"customer.currency\"\r\n        />\r\n\r\n        <div *ngIf=\"formControls.currency.touched && formControls.currency.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.currency.errors.required\">Currency is required.</div>\r\n          <div *ngIf=\"formControls.currency.errors.minlength\">\r\n            Currency should be at least 2 characters long.\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"w-100 d-block d-md-none\"></div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"phone\">Phone</label>\r\n        <input formControlName=\"phone\" id=\"phone\" type=\"text\" class=\"form-control\" [ngModel]=\"customer.phone\" />\r\n\r\n        <div *ngIf=\"formControls.phone.touched && formControls.phone.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.phone.errors.required\">Phone is required.</div>\r\n          <div *ngIf=\"formControls.phone.errors.minlength\">\r\n            Phone should be at least 6 characters long.\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"w-100 d-block d-md-none\"></div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"email\">email</label>\r\n        <input formControlName=\"email\" id=\"email\" type=\"text\" class=\"form-control\" [ngModel]=\"customer.email\" />\r\n\r\n        <div *ngIf=\"formControls.email.touched && formControls.email.invalid\" class=\"alert alert-danger\">\r\n          <div *ngIf=\"formControls.email.errors.required\">E-Mail is required.</div>\r\n          <div *ngIf=\"formControls.email.errors.minlength\">\r\n            E-Mail should be at least 6 characters long.\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <button\r\n      *ngIf=\"isNew\"\r\n      type=\"button\"\r\n      class=\"btn btn-primary btn-lg btn-danger shadow-none\"\r\n      routerLink=\"/customer/list\"\r\n    >\r\n      Cancel\r\n    </button>\r\n    <button\r\n      *ngIf=\"!isNew\"\r\n      type=\"button\"\r\n      class=\"btn btn-primary btn-lg btn-danger shadow-none\"\r\n      [routerLink]=\"['/customer/details', customer.id]\"\r\n    >\r\n      Cancel\r\n    </button>\r\n    <button type=\"button\" class=\"btn btn-primary btn-lg btn-success shadow-none\" type=\"submit\">\r\n      Save\r\n    </button>\r\n  </form>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Customer } from 'src/app/shared/model/customer';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { CustomerService } from 'src/app/shared/services/customer/customer.service';\r\nimport { Router } from '@angular/router';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Gender } from 'src/app/shared/enum/gender';\r\nimport { Title } from 'src/app/shared/enum/title';\r\n\r\n@Component({\r\n  selector: 'app-customer-edit',\r\n  templateUrl: './customer-edit.component.html',\r\n  styleUrls: ['./customer-edit.component.scss'],\r\n})\r\nexport class CustomerEditComponent implements OnInit {\r\n  id: any;\r\n  isNew: boolean = false;\r\n  customer: Customer;\r\n  form: FormGroup;\r\n  genderTypes = Gender;\r\n  genderTypeOptions = [];\r\n  titleTypes = Title;\r\n  titleTypeOptions = [];\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router,\r\n    private customerService: CustomerService,\r\n    public snackBar: MatSnackBar\r\n  ) {\r\n    this.activatedRoute.url.subscribe((params) => {\r\n      if (params[0].path === 'new') {\r\n        this.isNew = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  get formControls() {\r\n    return this.form.controls;\r\n  }\r\n\r\n  submit() {\r\n    this.form.markAllAsTouched();\r\n\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.customer = this.form.value as Customer;\r\n\r\n    if (this.isNew) {\r\n      this.customer.id = this.id;\r\n\r\n      this.customerService.insertCustomer(this.customer);\r\n      this.snackBar.open('Customer ' + this.customer.firstname + ' ' + this.customer.lastname + ' added', null, {\r\n        duration: 5000,\r\n      });\r\n      this.router.navigate(['/customer/list']);\r\n    } else {\r\n      this.customerService.updateCustomer(this.customer);\r\n      this.snackBar.open('Customer ' + this.customer.firstname + ' ' + this.customer.lastname + ' updated', null, {\r\n        duration: 5000,\r\n      });\r\n      this.router.navigate(['/customer/details', this.customer.id]);\r\n    }\r\n  }\r\n\r\n  async ngOnInit(): Promise<void> {\r\n    this.genderTypeOptions = Object.keys(this.genderTypes);\r\n    this.titleTypeOptions = Object.keys(this.titleTypes);\r\n\r\n    this.form = new FormGroup({\r\n      id: new FormControl(''),\r\n      firstname: new FormControl('', [Validators.required, Validators.minLength(2)]),\r\n      lastname: new FormControl('', [Validators.required, Validators.minLength(2)]),\r\n      title: new FormControl('', [Validators.required]),\r\n      gender: new FormControl('', [Validators.required]),\r\n      job: new FormControl(''),\r\n      birthdate: new FormControl('', [Validators.required]),\r\n      streetaddress: new FormControl('', [Validators.required, Validators.minLength(4)]),\r\n      postalcode: new FormControl('', [Validators.required, Validators.minLength(4)]),\r\n      city: new FormControl('', [Validators.required, Validators.minLength(2)]),\r\n      country: new FormControl('', [Validators.required, Validators.minLength(2), Validators.maxLength(2)]),\r\n      currency: new FormControl('', [Validators.required, Validators.minLength(2)]),\r\n      phone: new FormControl('', [Validators.required, Validators.minLength(6)]),\r\n      email: new FormControl('', [Validators.required, Validators.minLength(6)]),\r\n    });\r\n\r\n    this.id = this.activatedRoute.snapshot.params.id;\r\n\r\n    if (this.isNew) {\r\n      const uuid = uuidv4();\r\n      this.id = uuid;\r\n      this.customer = new Customer(\r\n        this.id,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null\r\n      );\r\n\r\n      return;\r\n    }\r\n\r\n    let customers = await this.customerService.getCustomer(this.id);\r\n    this.customer = customers[0];\r\n    this.form.markAllAsTouched();\r\n    this.form.setValue(this.customer);\r\n  }\r\n}\r\n","<div class=\"container-fluid\">\r\n  <div *ngIf=\"loading\" class=\"spinner\" role=\"status\"></div>\r\n\r\n  <button class=\"btn btn-primary addCustomer shadow-none\" routerLink=\"/customer/new\">New Customer</button>\r\n  <h1>Customers</h1>\r\n\r\n  <form class=\"form-inline\" action=\"#\" (submit)=\"filter(filterString.value, filterSelection.value)\">\r\n    <input type=\"text\" class=\"form-control\" #filterString placeholder=\"Filter value\" />\r\n    <select class=\"form-control\" #filterSelection>\r\n      <option value=\"name\">Name</option>\r\n      <option value=\"gender\">Gender</option>\r\n      <option value=\"job\">Job</option>\r\n      <option value=\"street\">Street</option>\r\n      <option value=\"postalcode\">Postal Code</option>\r\n      <option value=\"city\">City</option>\r\n      <option value=\"country\">Country</option>\r\n    </select>\r\n    <button type=\"submit\" class=\"btn btn-primary shadow-none\">Submit</button>\r\n  </form>\r\n\r\n  <div class=\"row customer-row\" *ngFor=\"let customer of customers\" [routerLink]=\"['/customer/details', customer.id]\">\r\n    <div class=\"col customer-name-col\">\r\n      <p class=\"title\">{{ customer.title }}</p>\r\n      <h2>{{ customer.lastname }}, {{ customer.firstname }}</h2>\r\n      <p><img class=\"icon\" src=\"../../../assets/icons/birth.png\" />{{ customer.birthdate | date: 'longDate' }}</p>\r\n    </div>\r\n    <div class=\"col d-none d-sm-block customer-data-col\">\r\n      <p>\r\n        <img class=\"icon\" src=\"../../../assets/icons/map.png\" />{{ customer.streetaddress }}, {{ customer.postalcode }}\r\n        {{ customer.city }}\r\n        <span [ngClass]=\"'flag-icon flag-icon-' + customer.country | lowercase\"></span>\r\n      </p>\r\n      <p><img class=\"icon\" src=\"../../../assets/icons/phone.png\" />{{ customer.phone }}</p>\r\n      <p><img class=\"icon\" src=\"../../../assets/icons/mail.png\" />{{ customer.email }}</p>\r\n    </div>\r\n    <div class=\"col d-none d-lg-block customer-col\">\r\n      <p><img class=\"icon\" src=\"../../../assets/icons/order.png\" />{{ customer.numberOfOrders }} orders</p>\r\n    </div>\r\n    <div class=\"col d-none d-lg-block customer-col\">\r\n      <p><img class=\"icon\" src=\"../../../assets/icons/issue.png\" />No issues</p>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Customer } from 'src/app/shared/model/customer';\r\nimport { CustomerService } from 'src/app/shared/services/customer/customer.service';\r\nimport { Order } from 'src/app/shared/model/order';\r\nimport { IndexedDatabaseService } from 'src/app/shared/services/database/indexed-database.service';\r\nimport { OrderService } from 'src/app/shared/services/order/order.service';\r\nimport { ConnectionService } from 'src/app/shared/services/connection/connection.service';\r\n\r\n@Component({\r\n  selector: 'app-customer-list',\r\n  templateUrl: './customer-list.component.html',\r\n  styleUrls: ['./customer-list.component.scss'],\r\n})\r\nexport class CustomerListComponent implements OnInit {\r\n  loading: boolean = false;\r\n  isLocalDataLoaded: boolean = false;\r\n\r\n  allCustomers: Customer[];\r\n  customers: Customer[];\r\n  allOrders: Order[];\r\n\r\n  constructor(\r\n    private customerService: CustomerService,\r\n    private orderService: OrderService,\r\n    private indexedDatabaseService: IndexedDatabaseService,\r\n    private connectionService: ConnectionService\r\n  ) {}\r\n\r\n  filter(filterString: string, filterSelection: string) {\r\n    this.customers = this.allCustomers.filter(function (elem) {\r\n      let filterValue;\r\n\r\n      switch (filterSelection) {\r\n        case 'name':\r\n          filterValue = elem.firstname + ' ' + elem.lastname;\r\n          break;\r\n        case 'gender':\r\n          if (elem.gender.toUpperCase() === 'MALE') {\r\n            return filterString.toUpperCase() === 'MALE';\r\n          }\r\n          if (elem.gender.toUpperCase() === 'FEMALE') {\r\n            return filterString.toUpperCase() === 'FEMALE';\r\n          }\r\n          if (elem.gender.toUpperCase() === 'OTHER') {\r\n            return filterString.toUpperCase() === 'OTHER';\r\n          }\r\n          break;\r\n        case 'job':\r\n          filterValue = elem.job;\r\n          break;\r\n        case 'street':\r\n          filterValue = elem.streetaddress;\r\n          break;\r\n        case 'postalcode':\r\n          filterValue = elem.postalcode ? elem.postalcode : '00000';\r\n          break;\r\n        case 'city':\r\n          filterValue = elem.city;\r\n          break;\r\n        case 'country':\r\n          filterValue = elem.country;\r\n          break;\r\n        default:\r\n          filterValue = elem.firstname + ' ' + elem.lastname;\r\n      }\r\n\r\n      return filterValue.toUpperCase().includes(filterString.toUpperCase());\r\n    });\r\n\r\n    this.customers.sort((customer1, customer2) => (customer1.lastname > customer2.lastname ? 1 : -1));\r\n  }\r\n  async ngOnInit() {\r\n    this.loading = true;\r\n\r\n    let connectionToServer = await this.connectionService.checkConnection();\r\n\r\n    if (connectionToServer) {\r\n      this.allCustomers = await this.customerService.getAllCustomers();\r\n      this.allCustomers = this.allCustomers;\r\n\r\n      this.indexedDatabaseService.addCustomersToDatabase(this.allCustomers);\r\n\r\n      let orders = await this.orderService.getAllOrders();\r\n      this.allOrders = orders;\r\n\r\n      this.indexedDatabaseService.addOrdersToDatabase(orders);\r\n\r\n      this.displayCustomers();\r\n    }\r\n  }\r\n\r\n  displayCustomers() {\r\n    for (let customer of this.allCustomers) {\r\n      let customerAsCustomer = customer as Customer;\r\n      let ordersOfCustomer = this.allOrders.filter((x) => x.customerid == customerAsCustomer.id);\r\n      customer.numberOfOrders = ordersOfCustomer.length;\r\n    }\r\n\r\n    this.customers = this.allCustomers.sort((customer1, customer2) =>\r\n      customer1.lastname > customer2.lastname ? 1 : -1\r\n    );\r\n    this.loading = false;\r\n  }\r\n}\r\n","export * from './customer-list.component';","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../shared/services/authentication/auth.service';\nimport { Router } from '@angular/router';\nimport { Form } from '@angular/forms';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n  username: String;\n  userPassword: String;\n  errorMessage: String;\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  ngOnInit() {}\n\n  login() {\n    this.authService\n      .validate(this.username, this.userPassword)\n      .then((response) => {\n        this.authService.setUserInfo({ user: response['user'] });\n        this.router.navigate(['customer']);\n      })\n      .catch((error) => {\n        this.errorMessage = \"User name and password don't match.\";\n      });\n  }\n}\n","<form class=\"form-signin\">\n  <h1>Please sign in</h1>\n  <label for=\"inputusername\" class=\"sr-only\">User name</label>\n  <input\n    type=\"text\"\n    name=\"username\"\n    id=\"inputusername\"\n    [(ngModel)]=\"username\"\n    class=\"form-control\"\n    placeholder=\"User name\"\n    required\n    autofocus\n  />\n  <label for=\"inputPassword\" class=\"sr-only\">Password</label>\n  <input\n    type=\"password\"\n    name=\"userPassword\"\n    id=\"inputPassword\"\n    [(ngModel)]=\"userPassword\"\n    class=\"form-control\"\n    placeholder=\"Password\"\n    required\n  />\n\n  <button class=\"btn btn-lg btn-primary btn-block\" (click)=\"login()\" type=\"button\">Sign in</button>\n  <p class=\"register\" routerLink=\"/register\">Register</p>\n  <p class=\"error\">{{ errorMessage }}</p>\n</form>\n","import { Component, OnInit } from '@angular/core';\nimport { Customer } from 'src/app/shared/model/customer';\nimport { CustomerService } from 'src/app/shared/services/customer/customer.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {\n  ConfirmDialogComponent,\n  ConfirmDialogModel,\n} from 'src/app/common-components/confirm-dialog/confirm-dialog.component';\nimport { Order } from 'src/app/shared/model/order';\nimport { Product } from 'src/app/shared/model/product';\nimport { OrderService } from 'src/app/shared/services/order/order.service';\nimport { ProductService } from 'src/app/shared/services/product/product.service';\nimport { OrderStatus } from 'src/app/shared/enum/order-status';\n\n@Component({\n  selector: 'app-order-details',\n  templateUrl: './order-details.component.html',\n  styleUrls: ['./order-details.component.scss'],\n})\nexport class OrderDetailsComponent implements OnInit {\n  id: any;\n  order: Order;\n  orderStatusTypes = OrderStatus;\n  orderStatusTypeOptions = [];\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private orderService: OrderService,\n    private productService: ProductService,\n    private customerService: CustomerService,\n    public dialog: MatDialog,\n    public snackBar: MatSnackBar\n  ) {}\n\n  deleteOrder(event) {\n    const dialogData = new ConfirmDialogModel('Confirm Action', 'Are you sure young want to delete order?');\n\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n      maxWidth: '400px',\n      data: dialogData,\n    });\n\n    dialogRef.afterClosed().subscribe((dialogResult) => {\n      const result = dialogResult;\n\n      if (result) {\n        this.orderService.deleteOrder(this.order.id.toString());\n        this.snackBar.open('order ' + this.order.name + ' deleted', null, {\n          duration: 5000,\n        });\n        this.router.navigate(['/order/list']);\n      }\n    });\n  }\n\n  async ngOnInit() {\n    this.orderStatusTypeOptions = Object.keys(this.orderStatusTypes)\n      .map((key) => this.orderStatusTypes[key])\n      .filter((value) => typeof value !== 'string') as string[];\n\n    this.id = this.activatedRoute.snapshot.params.id;\n    let orders = await this.orderService.getOrder(this.id);\n    let order = orders[0];\n    this.order = order;\n\n    let products = await this.productService.getProduct(order.productid.toString());\n    let product = products[0];\n    order.name = product.name;\n    order.manufacturer = product.manufacturer;\n    order.price = product.price;\n    order.totalPrice = order.amount * Number(order.price);\n\n    let customers = await this.customerService.getCustomer(order.customerid.toString());\n    let customer = customers[0];\n    order.customerName = customer.firstname + ' ' + customer.lastname;\n  }\n}\n","<div class=\"container-fluid\">\n  <h1>Order</h1>\n\n  <div class=\"row order\">\n    <div class=\"col data-column\">\n      <h2>Orders</h2>\n      <div class=\"detailItem\">\n        <img class=\"icon\" src=\"../../../assets/icons/date.png\" /> {{ order.date | date: 'longDate' }}\n      </div>\n      <div class=\"detailItem orderLink\" [routerLink]=\"['/customer/details', order.customerid]\">\n        <img class=\"icon\" src=\"../../../assets/icons/user.png\" /> {{ order.customerName }}\n      </div>\n      <div class=\"detailItem\">\n        <img class=\"icon\" src=\"../../../assets/icons/manufacturer.png\" /> {{ order.manufacturer }}\n      </div>\n      <div class=\"detailItem\"><img class=\"icon\" src=\"../../../assets/icons/product.png\" /> {{ order.name }}</div>\n      <div class=\"detailItem\"><img class=\"icon\" src=\"../../../assets/icons/currency.png\" /> {{ order.price }} Euro</div>\n      <div class=\"detailItem\"><img class=\"icon\" src=\"../../../assets/icons/counter.png\" /> {{ order.amount }} x</div>\n      <div class=\"detailItem\">\n        <img class=\"icon\" src=\"../../../assets/icons/bill.png\" />\n        {{ order.totalPrice | currency }}\n      </div>\n      <div class=\"detailItem\">\n        <img class=\"icon\" src=\"../../../assets/icons/status.png\" /> {{ orderStatusTypes[order.status] }}\n      </div>\n    </div>\n  </div>\n\n  <button type=\"button\" class=\"btn btn-primary btn-lg shadow-none\" [routerLink]=\"['/order/edit', order.id]\">\n    Edit\n  </button>\n  <button type=\"button\" class=\"btn btn-primary btn-lg shadow-none\" (click)=\"deleteOrder($event)\">Delete</button>\n  <button type=\"button\" class=\"btn btn-primary btn-lg shadow-none\" routerLink=\"/order/list\">\n    Back to Order List\n  </button>\n</div>\n","<div class=\"container-fluid\">\n  <h1>Order</h1>\n\n  <nav aria-label=\"breadcrumb\">\n    <ol class=\"breadcrumb\">\n      <li class=\"breadcrumb-item\" (click)=\"navigate(0)\">General data</li>\n      <li class=\"breadcrumb-item\" (click)=\"navigate(1)\">Product data</li>\n      <li class=\"breadcrumb-item\" (click)=\"navigate(2)\">Order Status</li>\n    </ol>\n  </nav>\n\n  <form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n    <div class=\"tab\">\n      <h2>General data</h2>\n      <div class=\"form-group\">\n        <label for=\"id\">Id</label>\n        <input formControlName=\"id\" id=\"id\" type=\"text\" class=\"form-control\" [ngModel]=\"order.id\" readonly />\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"customerid\">Customer</label>\n        <select formControlName=\"customerid\" id=\"customerid\" class=\"form-control\" [ngModel]=\"order.customerid\">\n          <option *ngFor=\"let customer of allCustomers\" [value]=\"customer.id\"\n            >{{ customer.lastname }}, {{ customer.firstname }}</option\n          >\n        </select>\n\n        <div *ngIf=\"formControls.customerid.touched && formControls.customerid.invalid\" class=\"alert alert-danger\">\n          <div *ngIf=\"formControls.customerid.errors.required\">Customer is required.</div>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"date\">Date</label>\n        <input\n          formControlName=\"date\"\n          id=\"date\"\n          type=\"date\"\n          class=\"form-control\"\n          [ngModel]=\"order.date | date: 'yyyy-MM-dd'\"\n        />\n\n        <div *ngIf=\"formControls.date.touched && formControls.date.invalid\" class=\"alert alert-danger\">\n          <div *ngIf=\"formControls.date.errors.required\">Date is required.</div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"tab\">\n      <h2>Product data</h2>\n      <div class=\"form-group\">\n        <label for=\"productid\">Product</label>\n        <select formControlName=\"productid\" id=\"productid\" class=\"form-control\" [ngModel]=\"order.productid\">\n          <option *ngFor=\"let product of allProducts\" [value]=\"product.id\">{{ product.name }}</option>\n        </select>\n\n        <div *ngIf=\"formControls.productid.touched && formControls.productid.invalid\" class=\"alert alert-danger\">\n          <div *ngIf=\"formControls.productid.errors.required\">Product is required.</div>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"amount\">Amount</label>\n        <input formControlName=\"amount\" id=\"amount\" type=\"text\" class=\"form-control\" [ngModel]=\"order.amount\" />\n\n        <div *ngIf=\"formControls.amount.touched && formControls.amount.invalid\" class=\"alert alert-danger\">\n          <div *ngIf=\"formControls.amount.errors.required\">Amount is required.</div>\n          <div *ngIf=\"formControls.amount.errors.min\">\n            Amount should be at least 1.\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"tab\">\n      <h2>Order Status</h2>\n\n      <div class=\"form-group\">\n        <select formControlName=\"status\" id=\"status\" class=\"form-control\" [ngModel]=\"order.status\">\n          <option *ngFor=\"let key of orderStatusTypeOptions\" [value]=\"key\">{{ orderStatusTypes[key] }}</option>\n        </select>\n\n        <div *ngIf=\"formControls.status.touched && formControls.status.invalid\" class=\"alert alert-danger\">\n          <div *ngIf=\"formControls.status.errors.required\">Status is required.</div>\n        </div>\n      </div>\n    </div>\n\n    <button type=\"button\" class=\"btn btn-primary btn-lg shadow-none\" routerLink=\"/order/list\">Cancel</button>\n    <button\n      type=\"button\"\n      class=\"btn btn-primary btn-lg prev shadow-none\"\n      (click)=\"previous()\"\n      [disabled]=\"currentTab === 0\"\n    >\n      Previous\n    </button>\n    <button\n      type=\"button\"\n      class=\"btn btn-primary btn-lg next shadow-none\"\n      (click)=\"next()\"\n      [disabled]=\"currentTab === lastTab\"\n    >\n      Next\n    </button>\n    <button type=\"button\" class=\"btn btn-primary btn-lg shadow-none\" type=\"submit\">\n      Save\n    </button>\n  </form>\n</div>\n","import { Component, OnInit, ElementRef, Renderer2 } from '@angular/core';\nimport { Order } from 'src/app/shared/model/order';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { OrderService } from 'src/app/shared/services/order/order.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Customer } from 'src/app/shared/model/customer';\nimport { Product } from 'src/app/shared/model/product';\nimport { CustomerService } from 'src/app/shared/services/customer/customer.service';\nimport { ProductService } from 'src/app/shared/services/product/product.service';\nimport { OrderStatus } from 'src/app/shared/enum/order-status';\n\n@Component({\n  selector: 'app-order-edit',\n  templateUrl: './order-edit.component.html',\n  styleUrls: ['./order-edit.component.scss'],\n})\nexport class OrderEditComponent implements OnInit {\n  id: any;\n  isNew: boolean = false;\n  order: Order;\n  allCustomers: Customer[];\n  allProducts: Product[];\n  form: FormGroup;\n  currentTab: number = 0;\n  lastTab: number = 2;\n  orderStatusTypes = OrderStatus;\n  orderStatusTypeOptions = [];\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private orderService: OrderService,\n    private customerService: CustomerService,\n    private productService: ProductService,\n    public snackBar: MatSnackBar,\n    private elem: ElementRef,\n    private renderer: Renderer2\n  ) {\n    this.activatedRoute.url.subscribe((params) => {\n      if (params[0].path === 'new') {\n        this.isNew = true;\n      }\n    });\n  }\n\n  get formControls() {\n    return this.form.controls;\n  }\n\n  submit() {\n    this.form.markAllAsTouched();\n    if (this.form.invalid) {\n      return;\n    }\n\n    this.order = this.form.value as Order;\n\n    if (this.isNew) {\n      this.order.id = this.id;\n\n      this.orderService.insertOrder(this.order);\n      this.snackBar.open('Order added', null, {\n        duration: 5000,\n      });\n      this.router.navigate(['/order/list']);\n    } else {\n      this.orderService.updateOrder(this.order);\n      this.snackBar.open('Order updated', null, {\n        duration: 5000,\n      });\n      this.router.navigate(['/order/details', this.order.id]);\n    }\n  }\n\n  async ngOnInit() {\n    this.orderStatusTypeOptions = Object.keys(this.orderStatusTypes)\n      .map((key) => this.orderStatusTypes[key])\n      .filter((value) => typeof value !== 'string') as string[];\n\n    this.form = new FormGroup({\n      id: new FormControl(''),\n      customerid: new FormControl('', [Validators.required, Validators.minLength(36), Validators.maxLength(36)]),\n      productid: new FormControl('', [Validators.required, Validators.minLength(36), Validators.maxLength(36)]),\n      date: new FormControl('', [Validators.required]),\n      status: new FormControl('', [Validators.required]),\n      amount: new FormControl('', [Validators.required, Validators.min(1)]),\n    });\n\n    this.id = this.activatedRoute.snapshot.params.id;\n    let allCustomers = await this.customerService.getAllCustomers();\n    this.allCustomers = allCustomers;\n    this.allCustomers = this.allCustomers.sort((customer1, customer2) =>\n      customer1.lastname > customer2.lastname ? 1 : -1\n    );\n\n    let allProductsPromise = await this.productService.getAllProducts();\n    this.allProducts = allProductsPromise as Product[];\n    this.allProducts = this.allProducts.sort((product1, product2) => (product1.name > product2.name ? 1 : -1));\n\n    if (this.isNew) {\n      const uuid = uuidv4();\n      this.id = uuid;\n      this.order = new Order(this.id, null, null, null, null, null, null);\n\n      this.showTab(0);\n      return;\n    }\n\n    let orders = await this.orderService.getOrder(this.id);\n    this.order = orders[0];\n    this.showTab(0);\n    this.form.markAllAsTouched();\n    this.form.setValue(this.order);\n  }\n\n  showTab(newTab) {\n    let tabElements = this.elem.nativeElement.querySelectorAll('.tab');\n    let currentTabElement = tabElements[this.currentTab];\n    currentTabElement.style.display = 'none';\n    let newTabElement = tabElements[newTab];\n    newTabElement.style.display = 'block';\n\n    let navElements = this.elem.nativeElement.querySelectorAll('.breadcrumb-item');\n    let currentNavElement = navElements[this.currentTab];\n    this.renderer.removeClass(currentNavElement, 'active');\n    let newNavElement = navElements[newTab];\n    this.renderer.addClass(newNavElement, 'active');\n  }\n\n  previous() {\n    if (this.currentTab === 0) {\n      return;\n    }\n    this.showTab(this.currentTab - 1);\n    this.currentTab = this.currentTab - 1;\n  }\n  next() {\n    if (this.currentTab === this.lastTab) {\n      return;\n    }\n    this.showTab(this.currentTab + 1);\n    this.currentTab = this.currentTab + 1;\n  }\n\n  navigate(tab) {\n    this.showTab(tab);\n    this.currentTab = tab;\n  }\n}\n","<div class=\"container-fluid\">\n  <div *ngIf=\"loading\" class=\"spinner\" role=\"status\"></div>\n\n  <button class=\"btn btn-primary addOrder shadow-none\" routerLink=\"/order/new\">New order</button>\n  <h1>Orders</h1>\n\n  <form class=\"form-inline\" action=\"#\" (submit)=\"filter(filterString.value, filterSelection.value)\">\n    <input type=\"text\" class=\"form-control\" #filterString placeholder=\"Filter value\" />\n    <select class=\"form-control\" #filterSelection>\n      <option value=\"name\">Name</option>\n    </select>\n    <button type=\"submit\" class=\"btn btn-primary shadow-none\">Submit</button>\n  </form>\n\n  <div class=\"row order-row\" *ngFor=\"let order of orders\" [routerLink]=\"['/order/details', order.id]\">\n    <div class=\"col order-name-col\">\n      <p class=\"title\">{{ order.manufacturer }}</p>\n      <h2>{{ order.name }}</h2>\n    </div>\n    <div class=\"col d-none d-sm-block order-col\">\n      <div>\n        <p [class]=\"orderStatusTypes[order.status]\">\n          <img class=\"icon\" src=\"../../../assets/icons/status.png\" />{{ orderStatusTypes[order.status] }}\n        </p>\n      </div>\n    </div>\n    <div class=\"col d-none d-sm-block order-col\">\n      <div>\n        <img class=\"icon\" src=\"../../../assets/icons/order.png\" />{{ order.amount }} items ordered on\n        {{ order.date | date: 'longDate' }}\n      </div>\n    </div>\n    <div class=\"col d-none d-lg-block order-col\">\n      <div>\n        <img class=\"icon\" src=\"../../../assets/icons/user.png\" />\n        {{ order.customerName }}\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Order } from 'src/app/shared/model/order';\nimport { OrderService } from 'src/app/shared/services/order/order.service';\nimport { ProductService } from 'src/app/shared/services/product/product.service';\nimport { Product } from 'src/app/shared/model/product';\nimport { CustomerService } from 'src/app/shared/services/customer/customer.service';\nimport { Customer } from 'src/app/shared/model/customer';\nimport { OrderStatus } from 'src/app/shared/enum/order-status';\n\n@Component({\n  selector: 'app-order-list',\n  templateUrl: './order-list.component.html',\n  styleUrls: ['./order-list.component.scss'],\n})\nexport class OrderListComponent implements OnInit {\n  loading: boolean = false;\n\n  orders: Order[];\n  allOrders: Order[];\n  orderStatusTypes = OrderStatus;\n  orderStatusTypeOptions = [];\n\n  constructor(\n    private orderService: OrderService,\n    private productService: ProductService,\n    private customerService: CustomerService\n  ) {}\n\n  filter(filterString: string, filterSelection: string) {\n    this.orders = this.allOrders.filter(function (elem) {\n      let filterValue;\n\n      switch (filterSelection) {\n        case 'name':\n          filterValue = elem.name;\n          break;\n        default:\n          filterValue = elem.name;\n      }\n\n      return filterValue.toUpperCase().includes(filterString.toUpperCase());\n    });\n\n    this.orders.sort((order1, order2) => (order1.name > order2.name ? 1 : -1));\n  }\n\n  async ngOnInit() {\n    this.orderStatusTypeOptions = Object.keys(this.orderStatusTypes)\n      .map((key) => this.orderStatusTypes[key])\n      .filter((value) => typeof value !== 'string') as string[];\n\n    this.loading = true;\n\n    let orders = await this.orderService.getAllOrders();\n    this.allOrders = orders as Order[];\n    this.allOrders = this.allOrders.slice(0, 100);\n\n    for (let order of this.allOrders) {\n      let products = await this.productService.getProduct(order.productid.toString());\n      let product = products[0];\n      order.name = product.name;\n      order.manufacturer = product.manufacturer;\n      order.price = product.price;\n\n      let customers = await this.customerService.getCustomer(order.customerid.toString());\n      let customer = customers[0];\n      order.customerName = customer.firstname + ' ' + customer.lastname;\n    }\n\n    this.allOrders.sort((order1, order2) => (order1.name > order2.name ? 1 : -1));\n    this.orders = this.allOrders;\n    this.loading = false;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../shared/services/authentication/auth.service';\nimport { Router } from '@angular/router';\nimport { v4 as uuidv4 } from 'uuid';\nimport { User } from '../shared/model/user';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n})\nexport class RegisterComponent implements OnInit {\n  user: User;\n  errorMessage: String;\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  ngOnInit(): void {\n    const uuid = uuidv4();\n    this.user = new User(uuid, null, null, null, null, null);\n  }\n\n  register() {\n    this.authService\n      .register(this.user)\n      .then((response) => {\n        this.router.navigate(['login']);\n      })\n      .catch((error) => {\n        this.errorMessage = 'An error occured during registration.';\n      });\n  }\n}\n","<form class=\"form-signin\">\n  <h1>Register</h1>\n  <label for=\"inputusername\" class=\"sr-only\">User name</label>\n  <input\n    type=\"text\"\n    name=\"username\"\n    id=\"inputusername\"\n    [(ngModel)]=\"user.username\"\n    class=\"form-control\"\n    placeholder=\"User name\"\n    required\n    autofocus\n  />\n  <label for=\"inputPassword\" class=\"sr-only\">Password</label>\n  <input\n    type=\"password\"\n    name=\"password\"\n    id=\"inputPassword\"\n    [(ngModel)]=\"user.password\"\n    class=\"form-control\"\n    placeholder=\"Password\"\n    required\n  />\n  <label for=\"inputfirstname\" class=\"sr-only\">First name</label>\n  <input\n    type=\"text\"\n    name=\"firstname\"\n    id=\"inputfirstname\"\n    [(ngModel)]=\"user.firstname\"\n    class=\"form-control\"\n    placeholder=\"First name\"\n    required\n    autofocus\n  />\n  <label for=\"inputlastname\" class=\"sr-only\">Last name</label>\n  <input\n    type=\"text\"\n    name=\"lastname\"\n    id=\"inputlastname\"\n    [(ngModel)]=\"user.lastname\"\n    class=\"form-control\"\n    placeholder=\"Last name\"\n    required\n    autofocus\n  />\n  <label for=\"inputemail\" class=\"sr-only\">E-Mail</label>\n  <input\n    type=\"text\"\n    name=\"email\"\n    id=\"inputemail\"\n    [(ngModel)]=\"user.email\"\n    class=\"form-control\"\n    placeholder=\"E-Mail\"\n    required\n    autofocus\n  />\n\n  <button class=\"btn btn-lg btn-primary btn-block\" (click)=\"register()\" type=\"button\">Register</button>\n  <p class=\"error\">{{ errorMessage }}</p>\n</form>\n","export enum Gender {\r\n  Male = 'Male',\r\n  Female = 'Female',\r\n  Other = 'Other',\r\n}\r\n","export enum OrderStatus {\r\n  Initialized = 0,\r\n  Sent = 1,\r\n  Processed = 2,\r\n  Archived = 3,\r\n}\r\n","export enum Title {\r\n  Mr = 'Mr',\r\n  Mrs = 'Mrs',\r\n  Ms = 'Ms',\r\n  Dr = 'Dr',\r\n  Rev = 'Rev',\r\n  Honorable = 'Honorable',\r\n}\r\n","import { Order } from './order';\r\n\r\nexport class Customer {\r\n  id: number;\r\n  firstname: string;\r\n  lastname: string;\r\n  title: string;\r\n  gender: string;\r\n  job: string;\r\n  birthdate: Date;\r\n  streetaddress: string;\r\n  postalcode: string;\r\n  city: string;\r\n  country: string;\r\n  currency: string;\r\n  phone: string;\r\n  email: string;\r\n\r\n  birthdateString: string;\r\n  orders: Order[];\r\n  numberOfOrders: number;\r\n\r\n  constructor(\r\n    id,\r\n    firstname,\r\n    lastname,\r\n    title,\r\n    gender,\r\n    job,\r\n    birthdate,\r\n    streetaddress,\r\n    postalcode,\r\n    city,\r\n    country,\r\n    currency,\r\n    phone,\r\n    email\r\n  ) {\r\n    this.id = id;\r\n    this.firstname = firstname;\r\n    this.lastname = lastname;\r\n    this.title = title;\r\n    this.gender = gender;\r\n    this.job = job;\r\n    this.birthdate = birthdate;\r\n    this.streetaddress = streetaddress;\r\n    this.postalcode = postalcode;\r\n    this.city = city;\r\n    this.country = country;\r\n    this.currency = currency;\r\n    this.phone = phone;\r\n    this.email = email;\r\n  }\r\n}\r\n","export class Order {\r\n  id: number;\r\n  customerid: number;\r\n  productid: number;\r\n  date: Date;\r\n  status: number;\r\n  amount: number;\r\n  timestamp: Date;\r\n\r\n  name: string;\r\n  manufacturer: string;\r\n  price: string;\r\n  totalPrice: number;\r\n\r\n  customerName: string;\r\n\r\n  constructor(id, customerid, productid, date, status, amount, timestamp) {\r\n    this.id = id;\r\n    this.customerid = customerid;\r\n    this.productid = productid;\r\n    this.date = date;\r\n    this.status = status;\r\n    this.amount = amount;\r\n    this.timestamp = timestamp;\r\n  }\r\n}\r\n","export class User {\r\n  id: number;\r\n  firstname: string;\r\n  lastname: string;\r\n  password: string;\r\n  username: string;\r\n  email: string;\r\n\r\n  constructor(id, firstname, lastname, password, username, email) {\r\n    this.id = id;\r\n    this.firstname = firstname;\r\n    this.lastname = lastname;\r\n    this.password = password;\r\n    this.username = username;\r\n    this.email = email;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuardService implements CanActivate {\n  constructor(private authService: AuthService, private route: Router) {}\n\n  canActivate() {\n    if (this.authService.isAuthenticated()) {\n      return true;\n    }\n    this.route.navigate(['login']);\n    return false;\n  }\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  currentUserId: string;\n  loggedInUserInfo: {};\n  userAuthenticated: EventEmitter<Boolean>;\n\n  constructor(private http: HttpClient) {\n    this.userAuthenticated = new EventEmitter();\n  }\n\n  public isAuthenticated(): Boolean {\n    let userId = localStorage.getItem('userId');\n    if (userId && JSON.parse(userId)) {\n      return true;\n    }\n    return false;\n  }\n\n  public logout() {\n    localStorage.removeItem('userId');\n    this.userAuthenticated.emit(false);\n  }\n\n  public setUserInfo(userId) {\n    localStorage.setItem('userId', JSON.stringify(userId));\n    this.currentUserId = userId;\n    this.userAuthenticated.emit(true);\n  }\n\n  public getCurrentUserId() {\n    let userIdJSON = localStorage.getItem('userId');\n    let userId = JSON.parse(userIdJSON);\n\n    return userId.user;\n  }\n\n  public validate(email, password) {\n    return this.http\n      .post('http://localhost:8000/api/authenticate', { username: email, password: password })\n      .toPromise();\n  }\n\n  public register(user) {\n    return this.http.post('http://localhost:8000/api/register', user).toPromise();\n  }\n}\n","import { Injectable, EventEmitter } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ConnectionService {\r\n  interval: any;\r\n  connectionChanged: EventEmitter<Boolean>;\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.connectionChanged = new EventEmitter();\r\n    this.InitializeConnectionCheck();\r\n  }\r\n\r\n  async checkConnection() {\r\n    let checkConnectionResult;\r\n\r\n    await this.http\r\n      .get('http://localhost:8000/api/connect')\r\n      .toPromise()\r\n      .then(() => {\r\n        checkConnectionResult = true;\r\n      })\r\n      .catch((error) => {\r\n        checkConnectionResult = false;\r\n      });\r\n\r\n    return checkConnectionResult;\r\n  }\r\n\r\n  goOffline() {\r\n    this.connectionChanged.emit(false);\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  goOnline() {\r\n    this.InitializeConnectionCheck();\r\n  }\r\n\r\n  InitializeConnectionCheck() {\r\n    this.interval = setInterval(async () => {\r\n      let connectionCheckResult = await this.checkConnection();\r\n      this.connectionChanged.emit(connectionCheckResult);\r\n    }, 5000);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Customer } from 'src/app/shared/model/customer';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomerService {\n  constructor(private http: HttpClient) {}\n\n  async getAllCustomers(): Promise<Customer[]> {\n    return await this.http.get<Customer[]>('http://localhost:8000/api/customers').toPromise();\n  }\n\n  async getCustomer(id: string): Promise<Customer[]> {\n    return await this.http.get<Customer[]>('http://localhost:8000/api/customers/' + id).toPromise();\n  }\n\n  async insertCustomer(Customer: Customer) {\n    return await this.http.post('http://localhost:8000/api/customers/', Customer).toPromise();\n  }\n\n  async updateCustomer(Customer: Customer) {\n    return await this.http.put('http://localhost:8000/api/customers/' + Customer.id, Customer).toPromise();\n  }\n\n  async deleteCustomer(id: string) {\n    return await this.http.delete('http://localhost:8000/api/customers/' + id).toPromise();\n  }\n}\n","import { Injectable, EventEmitter } from '@angular/core';\r\nimport { Customer } from '../../model/customer';\r\nimport { Order } from '../../model/order';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class IndexedDatabaseService {\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    let db;\r\n    let dbReq = indexedDB.open('customersDB', 2);\r\n\r\n    dbReq.onupgradeneeded = function (event: any) {\r\n      db = event.target.result;\r\n      db.createObjectStore('customer', { autoIncrement: true });\r\n      db.createObjectStore('order', { autoIncrement: true });\r\n    };\r\n\r\n    dbReq.onsuccess = function (event: any) {\r\n      db = event.target.result;\r\n    };\r\n\r\n    dbReq.onerror = function (event: any) {\r\n      alert('error opening database ' + event.target.errorCode);\r\n    };\r\n  }\r\n\r\n  storeItemsInDatabase(type: string, items: any[]) {\r\n    let indexedDB = window.indexedDB;\r\n    let open = indexedDB.open('customersDB', 2);\r\n\r\n    open.onsuccess = function () {\r\n      let db = open.result;\r\n      let transaction = db.transaction([type], 'readwrite');\r\n      let store = transaction.objectStore(type);\r\n      store.clear();\r\n\r\n      for (let item of items) {\r\n        store.add(item);\r\n      }\r\n\r\n      transaction.oncomplete = function () {\r\n        console.log('All ' + type + 's stored in IndexedDB.');\r\n      };\r\n      transaction.onerror = function (event: any) {\r\n        alert('Error storing ' + type + ' ' + event.target.errorCode);\r\n      };\r\n    };\r\n  }\r\n\r\n  addCustomersToDatabase(customers: Customer[]) {\r\n    this.storeItemsInDatabase('customer', customers);\r\n  }\r\n\r\n  addOrdersToDatabase(orders: Order[]) {\r\n    this.storeItemsInDatabase('order', orders);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Order } from '../../model/order';\nimport { ProductService } from '../product/product.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderService {\n  constructor(private http: HttpClient, private productService: ProductService) {}\n\n  async getAllOrders(): Promise<Order[]> {\n    return await this.http.get<Order[]>('http://localhost:8000/api/orders').toPromise();\n  }\n\n  async getAllOrdersOfCustomer(customerid: string) {\n    let ordersOfCustomer = await this.http\n      .get<Order[]>('http://localhost:8000/api/ordersOfCustomer/' + customerid)\n      .toPromise();\n\n    for (let order of ordersOfCustomer) {\n      let products = await this.productService.getProduct(order.productid.toString());\n      let product = products[0];\n\n      order.name = product.name;\n      order.manufacturer = product.manufacturer;\n      order.price = product.price;\n    }\n\n    return ordersOfCustomer;\n  }\n\n  async getOrder(id: string): Promise<Order[]> {\n    return await this.http.get<Order[]>('http://localhost:8000/api/orders/' + id).toPromise();\n  }\n\n  async insertOrder(order: Order) {\n    return await this.http.post('http://localhost:8000/api/orders/', order).toPromise();\n  }\n\n  async updateOrder(order: Order) {\n    return this.http.put('http://localhost:8000/api/orders/' + order.id, order).toPromise();\n  }\n\n  async deleteOrder(id: string) {\n    return this.http.delete('http://localhost:8000/api/orders/' + id).toPromise();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Product } from '../../model/product';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductService {\n  constructor(private http: HttpClient) {}\n\n  async getAllProducts(): Promise<Product[]> {\n    return this.http.get<Product[]>('http://localhost:8000/api/products').toPromise();\n  }\n\n  async getProduct(id: string): Promise<Product[]> {\n    return this.http.get<Product[]>('http://localhost:8000/api/products/' + id).toPromise();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { User } from '../../model/user';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  constructor(private http: HttpClient) {}\n\n  async getUser(id: string): Promise<User[]> {\n    return this.http.get<User[]>('http://localhost:8000/api/users/' + id).toPromise();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CustomerService } from './services/customer/customer.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { IndexedDatabaseService } from './services/database/indexed-database.service';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, HttpClientModule],\n  providers: [CustomerService, IndexedDatabaseService],\n})\nexport class SharedModule {}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { User } from '../shared/model/user';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.scss'],\n})\nexport class UserComponent implements OnInit {\n  @Input()\n  object: any;\n  user: User;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.user = this.object as User;\n  }\n}\n","<p><img class=\"icon\" src=\"../../../assets/icons/user.png\" /> {{ user.firstname }} {{ user.lastname }}</p>\n<p><img class=\"icon\" src=\"../../../assets/icons/counter.png\" /> {{ user.id }}</p>\n<p><img class=\"icon\" src=\"../../../assets/icons/mail.png\" /> {{ user.email }}</p>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}